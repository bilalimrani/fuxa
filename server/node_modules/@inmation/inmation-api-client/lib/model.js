'use strict';

const { WS } = require('./environment.js');

class WSConnectionInfo {

    constructor(doc) {
        this._sessionid = null;
        this._authenticated = null;
        this._webapi_status = null;
        this._token_response = null;

        this._readyState = -1;
        this.processInfo(doc);
    }

    processInfo(info, readyState) {
        const _info = info || { sessionid: this._sessionid, authenticated: false, webapi_status: this._webapi_status }
        let changed = false;

        const _assignProperty = (propName, defaultValue) => {
            const _propName = `_${propName}`;
            if (this[_propName] !== _info[propName]) {
                changed = true;
                this[_propName] = _info[propName] || defaultValue;
            }
        }
        _assignProperty('sessionid');
        _assignProperty('authenticated', false);
        _assignProperty('webapi_status');
        if (!this._authenticated) {
            this._token_response = null
        }
        else if (_info.token_response) {
            _assignProperty('token_response')
        }

        const rsChanged = this.setReadyState(readyState, true);
        return changed || rsChanged;
    }

    setReadyState(readyState, forceUpdate = false) {
        if (!forceUpdate && this._readyState === readyState) return false;
        this._readyState = readyState;

        const _setState = (state) => {
            this._state = state;
            if (state === WSConnectionInfo.CONNECTING) this._stateString = WSConnectionInfo.CONNECTINGSTRING;
            else if (state === WSConnectionInfo.OPEN) this._stateString = WSConnectionInfo.OPENSTRING;
            else if (state === WSConnectionInfo.DISCONNECTING) this._stateString = WSConnectionInfo.DISCONNECTINGSTRING;
            else if (state === WSConnectionInfo.CONNECTED) this._stateString = WSConnectionInfo.CONNECTEDSTRING;
            else {
                this._sessionid = null;
                this._authenticated = false;
                this._webapi_status = null;
                this._stateString = WSConnectionInfo.DISCONNECTEDSTRING;
            }
        }

        if (readyState === WS.CLOSED) _setState(WSConnectionInfo.DISCONNECTED);
        else if (readyState === WS.CLOSING) _setState(WSConnectionInfo.DISCONNECTING);
        else if (readyState === WS.CONNECTING) _setState(WSConnectionInfo.CONNECTING);
        else if (readyState === WS.OPEN && this._sessionid) _setState(WSConnectionInfo.CONNECTED);
        else if (readyState === WS.OPEN) _setState(WSConnectionInfo.OPEN);
        else _setState(WSConnectionInfo.DISCONNECTED);
        return true;
    }

    get authenticated() {
        return this._authenticated;
    }

    get sessionid() {
        return this._sessionid;
    }

    get state() {
        return this._state;
    }

    get stateString() {
        return this._stateString;
    }

    get webapi_status() {
        return this._webapi_status;
    }

    get token_response() {
        return this._token_response;
    }
}

WSConnectionInfo.CONNECTING = 0;
WSConnectionInfo.OPEN = 1;
WSConnectionInfo.DISCONNECTING = 2;
WSConnectionInfo.DISCONNECTED = 3;
WSConnectionInfo.CONNECTED = 4;

WSConnectionInfo.CONNECTINGSTRING = 'Connecting';
WSConnectionInfo.OPENSTRING = 'Open';
WSConnectionInfo.DISCONNECTINGSTRING = 'Disconnecting';
WSConnectionInfo.DISCONNECTEDSTRING = 'Disconnected';
WSConnectionInfo.CONNECTEDSTRING = 'Connected';

class Identity {

    constructor(identifier) {
        const idType = typeof (identifier);

        if (idType === 'string')
            this.p = identifier;
        else if (idType === 'number')
            this.i = identifier;
    }
}

class Item extends Identity {

}

class ItemValue extends Item {

    constructor(path, value, timestamp, quality) {
        super(path);
        const date = new Date();

        this.v = value;
        this.t = timestamp || date.toISOString();
        this.q = quality || 0;
    }
}

class HistoricalDataItem extends Item {

    constructor(identifier, aggregate) {
        super(identifier);
        this.aggregate = aggregate;
    }
}

class RawHistoricalDataQuery {

    constructor(items, startTime, endTime, filter, fields) {
        let _items = items;
        if (!Array.isArray(items))
            _items = [items];
        this.items = _items;
        this.start_time = startTime;
        this.end_time = endTime;
        if (filter)
            this.filter = filter;
        if (fields)
            this.fields = fields;
    }
}

module.exports = {
    HistoricalDataItem: HistoricalDataItem,
    Identity: Identity,
    Item: Item,
    ItemValue: ItemValue,
    RawHistoricalDataQuery: RawHistoricalDataQuery,
    WSConnectionInfo: WSConnectionInfo
}