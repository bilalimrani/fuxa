'use strict';

const { RawHistoricalDataQuery } = require('./model.js');

let reqidNumber = 0;
const reqid = () => {
    if (reqidNumber === Number.MAX_VALUE) reqidNumber = 0;
    reqidNumber += 1;
    return reqidNumber
}

class RPC {

    constructor(name, options) {
        this.name = name;
        this.reqid = reqid();
        this.data = {};
        this.options = options;
    }

    set options(options) {
        this.opt = options;
    }

    copyParamToData(params, name, type) {
        if (typeof (params) === 'undefined') return
        const paramVal = params[name];
        if (typeof (paramVal) === type) {
            this.data[name] = paramVal;
        }
    }
}

class AuthenticateRPC extends RPC {

    constructor(options) {
        super(AuthenticateRPC.NAME)
        this.authentication = options.auth;
        // authorization can be provided in options (old way) or in its auth part.
        this.authorization = options.authorization
    }

    set authentication(auth) {
        if (typeof (auth) === 'object') {
            this.data.usr = auth.username;
            this.data.pwd = auth.password;
            this.data.grant_type = auth.grant_type;
            this.data.authority = auth.authority;
            if (auth.include_claims) {
                this.opt
            }
            this.options = {
                disconnect_on_access_denied: auth.disconnect_on_access_denied,
                include_claims: auth.include_claims
            };
            if (auth.authorization) {
                this.authorization = auth.authorization
            }
        }
    }

    set authorization(auth) {
        if (typeof (auth) === 'string') {
            this.data.authorization = auth
        }
    }
}

class CloseRPC extends RPC {

    constructor() {
        super(CloseRPC.NAME);
    }
}

class ItemsRPC extends RPC {

    constructor(name, items, options) {
        super(name, options);
        this.items = items;
    }

    set items(items) {
        this.data.items = items || [];
    }
}

class ReadHistoricalDataRPC extends ItemsRPC {

    constructor(histItems, startTime, endTime, numberOfIntervals, options) {
        super(ReadHistoricalDataRPC.NAME, histItems, options);
        this.startTime = startTime;
        this.endTime = endTime;
        this.numberOfIntervals = numberOfIntervals;
    }

    set startTime(startTime) {
        this.data.start_time = startTime;
    }

    set endTime(endTime) {
        this.data.end_time = endTime;
    }

    set numberOfIntervals(numberOfIntervals) {
        this.data.intervals_no = numberOfIntervals;
    }
}

class ReadHistoricalDataAtTimeRPC extends ItemsRPC {

    constructor(items, timestamp, options) {
        super(ReadHistoricalDataAtTimeRPC.NAME, items, options);
        this.timestamp = timestamp;
    }

    set timestamp(timestamp) {
        this.data.timestamp = timestamp;
    }
}

class ReadRawHistoricalDataRPC extends RPC {

    constructor(queries, options) {
        super(ReadRawHistoricalDataRPC.NAME, options);
        this.queries = queries;
    }

    set queries(queries) {
        this.data.queries = queries;
    }

    static create(items, startTime, endTime, filter, options) {
        const query = new RawHistoricalDataQuery(items, startTime, endTime, filter);
        return ReadRawHistoricalDataRPC.createByQuery(query, options);
    }

    static createByQuery(query, options) {
        let _queries = query
        if (!Array.isArray(query)) {
            _queries = [query];
        }
        return new ReadRawHistoricalDataRPC(_queries, options);
    }
}

class ReadRPC extends ItemsRPC {

    constructor(items, options) {
        super(ReadRPC.NAME, items, options);
    }
}

class RunScriptRPC extends RPC {

    constructor(context, script, options) {
        super(RunScriptRPC.NAME, options);

        this.context = context;
        this.script = script;
    }

    set context(context) {
        let ctx = context
        if (!Array.isArray(context) && context !== null) {
            ctx = [context];
        }
        this.ctx = ctx;
    }

    set script(script) {
        this.data.scr = script;
    }
}

class ExecFunctionRPC extends RunScriptRPC {

    constructor(context, libraryName, functionName, functionArg, options) {
        super(context, null, options)
        this.name = ExecFunctionRPC.NAME;
        this.libraryName = libraryName;
        this.functionName = functionName;
        this.functionArg = functionArg;
    }

    set functionArg(functionArg) {
        this.data.farg = functionArg;
    }

    set functionName(functionName) {
        this.data.func = functionName;
    }

    set libraryName(libraryName) {
        this.data.lib = libraryName;
    }
}

class MassRPC extends ItemsRPC {

    static get NAME() {
        return 'mass';
    }

    constructor(items, options) {
        super(MassRPC.NAME, items, options);
    }
}

class SubscribeRPC extends ItemsRPC {

    constructor(items, type, options) {
        super(SubscribeRPC.NAME, items, options);
        this.type = type;
    }

    set type(type) {
        this.data.type = type;
    }
}

class WriteRPC extends ItemsRPC {

    constructor(items, options) {
        super(WriteRPC.NAME, items, options);
    }
}

AuthenticateRPC.NAME = "authenticate";
CloseRPC.NAME = "close";
ExecFunctionRPC.NAME = "execfunction";
ReadRPC.NAME = "read";
ReadRawHistoricalDataRPC.NAME = "readrawhistoricaldata";
ReadHistoricalDataRPC.NAME = "readhistoricaldata";
ReadHistoricalDataAtTimeRPC.NAME = "readhistoricaldataattime";
RunScriptRPC.NAME = "runscript";
SubscribeRPC.NAME = "subscribe";
WriteRPC.NAME = "write";

module.exports = {
    AuthenticateRPC: AuthenticateRPC,
    CloseRPC: CloseRPC,
    ExecFunctionRPC: ExecFunctionRPC,
    MassRPC: MassRPC,
    ReadRPC: ReadRPC,
    ReadHistoricalDataRPC: ReadHistoricalDataRPC,
    ReadHistoricalDataAtTimeRPC: ReadHistoricalDataAtTimeRPC,
    ReadRawHistoricalDataRPC: ReadRawHistoricalDataRPC,
    RunScriptRPC: RunScriptRPC,
    SubscribeRPC: SubscribeRPC,
    WriteRPC: WriteRPC,
}