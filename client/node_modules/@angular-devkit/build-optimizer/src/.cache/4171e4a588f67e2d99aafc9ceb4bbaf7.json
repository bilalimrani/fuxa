{"remainingRequest":"/Users/bilal/Documents/GitHub/FUXA/client/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/bilal/Documents/GitHub/FUXA/client/node_modules/angular-gridster2/fesm5/angular-gridster2.js","dependencies":[{"path":"/Users/bilal/Documents/GitHub/FUXA/client/node_modules/angular-gridster2/fesm5/angular-gridster2.js","mtime":1535402702000},{"path":"/Users/bilal/Documents/GitHub/FUXA/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bilal/Documents/GitHub/FUXA/client/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_angular_common PURE_IMPORTS_END */\nimport { Injectable, ChangeDetectorRef, Component, ElementRef, Input, NgZone, Renderer2, ViewEncapsulation, Host, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @enum {string} */\nvar GridType = {\n    Fit: 'fit',\n    ScrollVertical: 'scrollVertical',\n    ScrollHorizontal: 'scrollHorizontal',\n    Fixed: 'fixed',\n    VerticalFixed: 'verticalFixed',\n    HorizontalFixed: 'horizontalFixed',\n};\n/** @enum {string} */\nvar DisplayGrid = {\n    Always: 'always',\n    OnDragAndResize: 'onDrag&Resize',\n    None: 'none',\n};\n/** @enum {string} */\nvar CompactType = {\n    None: 'none',\n    CompactUp: 'compactUp',\n    CompactLeft: 'compactLeft',\n    CompactUpAndLeft: 'compactUp&Left',\n    CompactLeftAndUp: 'compactLeft&Up',\n    CompactUpAndRight: 'compactUp&Right',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar GridsterConfigService = {\n    gridType: GridType.Fit,\n    // 'fit' will fit the items in the container without scroll;\n    // 'scrollVertical' will fit on width and height of the items will be the same as the width\n    // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n    // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n    // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n    // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n    fixedColWidth: 250,\n    // fixed col width for gridType: 'fixed'\n    fixedRowHeight: 250,\n    // fixed row height for gridType: 'fixed'\n    keepFixedHeightInMobile: false,\n    // keep the height from fixed gridType in mobile layout\n    keepFixedWidthInMobile: false,\n    // keep the width from fixed gridType in mobile layout\n    setGridSize: false,\n    // sets grid size depending on content\n    compactType: CompactType.None,\n    // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n    mobileBreakpoint: 640,\n    // if the screen is not wider that this, remove the grid layout and stack the items\n    minCols: 1,\n    // minimum amount of columns in the grid\n    maxCols: 100,\n    // maximum amount of columns in the grid\n    minRows: 1,\n    // minimum amount of rows in the grid\n    maxRows: 100,\n    // maximum amount of rows in the grid\n    defaultItemCols: 1,\n    // default width of an item in columns\n    defaultItemRows: 1,\n    // default height of an item in rows\n    maxItemCols: 50,\n    // max item number of cols\n    maxItemRows: 50,\n    // max item number of rows\n    minItemCols: 1,\n    // min item number of columns\n    minItemRows: 1,\n    // min item number of rows\n    minItemArea: 1,\n    // min item area: cols * rows\n    maxItemArea: 2500,\n    // max item area: cols * rows\n    margin: 10,\n    // margin between grid items\n    outerMargin: true,\n    // if margins will apply to the sides of the container\n    outerMarginTop: null,\n    // override outer margin for grid\n    outerMarginRight: null,\n    // override outer margin for grid\n    outerMarginBottom: null,\n    // override outer margin for grid\n    outerMarginLeft: null,\n    // override outer margin for grid\n    scrollSensitivity: 10,\n    // margin of the dashboard where to start scrolling\n    scrollSpeed: 20,\n    // how much to scroll each mouse move when in the scrollSensitivity zone\n    initCallback: undefined,\n    // callback to call after grid has initialized. Arguments: gridsterComponent\n    destroyCallback: undefined,\n    // callback to call after grid has destroyed. Arguments: gridsterComponent\n    gridSizeChangedCallback: undefined,\n    // callback to call after grid has changed size. Arguments: gridsterComponent\n    itemChangeCallback: undefined,\n    // callback to call for each item when is changes x, y, rows, cols.\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemResizeCallback: undefined,\n    // callback to call for each item when width/height changes.\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemInitCallback: undefined,\n    // callback to call for each item when is initialized.\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemRemovedCallback: undefined,\n    // callback to call for each item when is initialized.\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemValidateCallback: undefined,\n    // callback to call to validate item position/size. Return true if valid.\n    // Arguments: gridsterItem\n    enableEmptyCellClick: false,\n    // enable empty cell click events\n    enableEmptyCellContextMenu: false,\n    // enable empty cell context menu (right click) events\n    enableEmptyCellDrop: false,\n    // enable empty cell drop events\n    enableEmptyCellDrag: false,\n    // enable empty cell drag events\n    emptyCellClickCallback: undefined,\n    // empty cell click callback\n    emptyCellContextMenuCallback: undefined,\n    // empty cell context menu (right click) callback\n    emptyCellDropCallback: undefined,\n    // empty cell drag drop callback. HTML5 Drag & Drop\n    emptyCellDragCallback: undefined,\n    // empty cell drag and create item like excel cell selection\n    emptyCellDragMaxCols: 50,\n    // limit empty cell drag max cols\n    emptyCellDragMaxRows: 50,\n    // limit empty cell drag max rows\n    // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n    ignoreMarginInRow: false,\n    // ignore the gap between rows for items which span multiple rows (see #162, #224)\n    draggable: {\n        delayStart: 0,\n        // milliseconds to delay the start of drag, useful for touch interaction\n        enabled: false,\n        // enable/disable draggable items\n        ignoreContentClass: 'gridster-item-content',\n        // default content class to ignore the drag event from\n        ignoreContent: false,\n        // if true drag will start only from elements from `dragHandleClass`\n        dragHandleClass: 'drag-handler',\n        // drag event only from this class. If `ignoreContent` is true.\n        stop: undefined,\n        // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n        start: undefined,\n        // callback when dragging an item starts.\n        // Arguments: item, gridsterItem, event\n        dropOverItems: false,\n        // enable drop items on top other item\n        dropOverItemsCallback: undefined // callback on drop over another item\n    },\n    resizable: {\n        delayStart: 0,\n        // milliseconds to delay the start of resize, useful for touch interaction\n        enabled: false,\n        // enable/disable resizable items\n        handles: {\n            s: true,\n            e: true,\n            n: true,\n            w: true,\n            se: true,\n            ne: true,\n            sw: true,\n            nw: true\n        },\n        // resizable edges of an item\n        stop: undefined,\n        // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n        start: undefined // callback when resizing an item starts.\n    },\n    swap: true,\n    // allow items to switch position if drop on top of another\n    pushItems: false,\n    // push items when resizing and dragging\n    disablePushOnDrag: false,\n    // disable push on drag\n    disablePushOnResize: false,\n    // disable push on resize\n    pushDirections: { north: true, east: true, south: true, west: true },\n    // control the directions items are pushed\n    pushResizeItems: false,\n    // on resize of item will shrink adjacent items\n    displayGrid: DisplayGrid.OnDragAndResize,\n    // display background grid of rows and columns\n    disableWindowResize: false,\n    // disable the window on resize listener. This will stop grid to recalculate on window resize.\n    disableWarnings: false,\n    // disable console log warnings about misplacement of grid items\n    scrollToNewItems: false,\n    // scroll to new items placed in a scrollable view\n    disableAutoPositionOnConflict: false // disable auto-position of items on conflict state\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterUtils = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterUtils() {\n    }\n    /**\n     * @param {?} obj1\n     * @param {?} obj2\n     * @param {?} properties\n     * @return {?}\n     */\n    GridsterUtils.merge = /**\n     * @param {?} obj1\n     * @param {?} obj2\n     * @param {?} properties\n     * @return {?}\n     */\n        function (obj1, obj2, properties) {\n            for (var p in obj2) {\n                if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n                    if (typeof obj2[p] === 'object') {\n                        obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n                    }\n                    else {\n                        obj1[p] = obj2[p];\n                    }\n                }\n            }\n            return obj1;\n        };\n    /**\n     * @param {?} func\n     * @param {?} wait\n     * @return {?}\n     */\n    GridsterUtils.debounce = /**\n     * @param {?} func\n     * @param {?} wait\n     * @return {?}\n     */\n        function (func, wait) {\n            /** @type {?} */\n            var timeout;\n            return function () {\n                /** @type {?} */\n                var context = this;\n                /** @type {?} */\n                var args = arguments;\n                /** @type {?} */\n                var later = function () {\n                    timeout = null;\n                    func.apply(context, args);\n                };\n                clearTimeout(timeout);\n                timeout = setTimeout(later, wait);\n            };\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterUtils.checkTouchEvent = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (e.clientX === undefined && e.touches) {\n                if (e.touches && e.touches.length) {\n                    e.clientX = e.touches[0].clientX;\n                    e.clientY = e.touches[0].clientY;\n                }\n                else if (e.changedTouches && e.changedTouches.length) {\n                    e.clientX = e.changedTouches[0].clientX;\n                    e.clientY = e.changedTouches[0].clientY;\n                }\n            }\n        };\n    /**\n     * @param {?} gridster\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterUtils.checkContentClassForEvent = /**\n     * @param {?} gridster\n     * @param {?} e\n     * @return {?}\n     */\n        function (gridster, e) {\n            if (gridster.$options.draggable.ignoreContent) {\n                if (!GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass)) {\n                    return true;\n                }\n            }\n            else {\n                if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridster\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterUtils.checkContentClassForEmptyCellClickEvent = /**\n     * @param {?} gridster\n     * @param {?} e\n     * @return {?}\n     */\n        function (gridster, e) {\n            return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)\n                || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n        };\n    /**\n     * @param {?} target\n     * @param {?} current\n     * @param {?} contentClass\n     * @return {?}\n     */\n    GridsterUtils.checkContentClass = /**\n     * @param {?} target\n     * @param {?} current\n     * @param {?} contentClass\n     * @return {?}\n     */\n        function (target, current, contentClass) {\n            if (!target || target === current) {\n                return false;\n            }\n            if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n                return true;\n            }\n            else {\n                return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n            }\n        };\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    GridsterUtils.compareItems = /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n        function (a, b) {\n            if (a.y > b.y) {\n                return -1;\n            }\n            else if (a.y < b.y) {\n                return 1;\n            }\n            else if (a.x > b.x) {\n                return -1;\n            }\n            else {\n                return 1;\n            }\n        };\n    return GridsterUtils;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */ GridsterComponentInterface = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterComponentInterface() {\n    }\n    return GridsterComponentInterface;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterEmptyCell = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterEmptyCell(gridster) {\n        this.gridster = gridster;\n    }\n    /**\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            delete this.initialItem;\n            delete this.gridster.movingItem;\n            if (this.gridster.previewStyle) {\n                this.gridster.previewStyle();\n            }\n            delete this.gridster;\n            if (this.emptyCellExit) {\n                this.emptyCellExit();\n                this.emptyCellExit = null;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.updateOptions = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n                this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n                this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n            }\n            else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n                this.emptyCellClick();\n                this.emptyCellClickTouch();\n                this.emptyCellClick = null;\n                this.emptyCellClickTouch = null;\n            }\n            if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\n                this.gridster.options.emptyCellContextMenuCallback) {\n                this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n            }\n            else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n                this.emptyCellContextMenu();\n                this.emptyCellContextMenu = null;\n            }\n            if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n                this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n                this.gridster.zone.runOutsideAngular(function () {\n                    _this.emptyCellMove = _this.gridster.renderer.listen(_this.gridster.el, 'dragover', _this.emptyCellDragOver.bind(_this));\n                });\n                this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', function () {\n                    _this.gridster.movingItem = null;\n                    _this.gridster.previewStyle();\n                });\n            }\n            else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n                this.emptyCellDrop();\n                this.emptyCellMove();\n                this.emptyCellExit();\n                this.emptyCellMove = null;\n                this.emptyCellDrop = null;\n                this.emptyCellExit = null;\n            }\n            if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n                this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n                this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n            }\n            else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n                this.emptyCellDrag();\n                this.emptyCellDragTouch();\n                this.emptyCellDrag = null;\n                this.emptyCellDragTouch = null;\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.emptyCellClickCb = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n                return;\n            }\n            /** @type {?} */\n            var item = this.getValidItemFromEvent(e);\n            if (!item) {\n                return;\n            }\n            if (this.gridster.options.emptyCellClickCallback) {\n                this.gridster.options.emptyCellClickCallback(e, item);\n            }\n            this.gridster.cdRef.markForCheck();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.emptyCellContextMenuCb = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            /** @type {?} */\n            var item = this.getValidItemFromEvent(e);\n            if (!item) {\n                return;\n            }\n            if (this.gridster.options.emptyCellContextMenuCallback) {\n                this.gridster.options.emptyCellContextMenuCallback(e, item);\n            }\n            this.gridster.cdRef.markForCheck();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.emptyCellDragDrop = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            /** @type {?} */\n            var item = this.getValidItemFromEvent(e);\n            if (!item) {\n                return;\n            }\n            if (this.gridster.options.emptyCellDropCallback) {\n                this.gridster.options.emptyCellDropCallback(e, item);\n            }\n            this.gridster.cdRef.markForCheck();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.emptyCellDragOver = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            /** @type {?} */\n            var item = this.getValidItemFromEvent(e);\n            if (item) {\n                e.dataTransfer.dropEffect = 'move';\n                this.gridster.movingItem = item;\n            }\n            else {\n                e.dataTransfer.dropEffect = 'none';\n                this.gridster.movingItem = null;\n            }\n            this.gridster.previewStyle();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.emptyCellMouseDown = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            /** @type {?} */\n            var item = this.getValidItemFromEvent(e);\n            if (!item) {\n                return;\n            }\n            this.initialItem = item;\n            this.gridster.movingItem = item;\n            this.gridster.previewStyle();\n            this.gridster.zone.runOutsideAngular(function () {\n                _this.emptyCellMMove = _this.gridster.renderer.listen('window', 'mousemove', _this.emptyCellMouseMove.bind(_this));\n                _this.emptyCellMMoveTouch = _this.gridster.renderer.listen('window', 'touchmove', _this.emptyCellMouseMove.bind(_this));\n            });\n            this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n            this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.emptyCellMouseMove = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            /** @type {?} */\n            var item = this.getValidItemFromEvent(e, this.initialItem);\n            if (!item) {\n                return;\n            }\n            this.gridster.movingItem = item;\n            this.gridster.previewStyle();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.emptyCellMouseUp = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            this.emptyCellMMove();\n            this.emptyCellMMoveTouch();\n            this.emptyCellUp();\n            this.emptyCellUpTouch();\n            /** @type {?} */\n            var item = this.getValidItemFromEvent(e, this.initialItem);\n            if (item) {\n                this.gridster.movingItem = item;\n            }\n            if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n                this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n            }\n            setTimeout(function () {\n                _this.initialItem = null;\n                if (_this.gridster) {\n                    _this.gridster.movingItem = null;\n                    _this.gridster.previewStyle();\n                }\n            });\n            this.gridster.cdRef.markForCheck();\n        };\n    /**\n     * @param {?} e\n     * @param {?=} oldItem\n     * @return {?}\n     */\n    GridsterEmptyCell.prototype.getValidItemFromEvent = /**\n     * @param {?} e\n     * @param {?=} oldItem\n     * @return {?}\n     */\n        function (e, oldItem) {\n            e.preventDefault();\n            e.stopPropagation();\n            GridsterUtils.checkTouchEvent(e);\n            /** @type {?} */\n            var rect = this.gridster.el.getBoundingClientRect();\n            /** @type {?} */\n            var x = e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.$options.margin;\n            /** @type {?} */\n            var y = e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.$options.margin;\n            /** @type {?} */\n            var item = {\n                x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n                y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n                cols: this.gridster.$options.defaultItemCols,\n                rows: this.gridster.$options.defaultItemRows\n            };\n            if (oldItem) {\n                item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n                item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n                if (oldItem.x < item.x) {\n                    item.x = oldItem.x;\n                }\n                else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n                    item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n                }\n                if (oldItem.y < item.y) {\n                    item.y = oldItem.y;\n                }\n                else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n                    item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n                }\n            }\n            if (this.gridster.checkCollision(item)) {\n                return;\n            }\n            return item;\n        };\n    return GridsterEmptyCell;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterCompact = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterCompact(gridster) {\n        this.gridster = gridster;\n        this.moveRightTillCollision = function (item) {\n            item.x += 1;\n            if (this.gridster.checkCollision(item)) {\n                item.x -= 1;\n                return false;\n            }\n            else {\n                this.moveRightTillCollision(item);\n                return true;\n            }\n        };\n    }\n    /**\n     * @return {?}\n     */\n    GridsterCompact.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            delete this.gridster;\n        };\n    /**\n     * @return {?}\n     */\n    GridsterCompact.prototype.checkCompact = /**\n     * @return {?}\n     */\n        function () {\n            if (this.gridster.$options.compactType !== CompactType.None) {\n                if (this.gridster.$options.compactType === CompactType.CompactUp) {\n                    this.checkCompactUp();\n                }\n                else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n                    this.checkCompactLeft();\n                }\n                else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n                    this.checkCompactUp();\n                    this.checkCompactLeft();\n                }\n                else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n                    this.checkCompactLeft();\n                    this.checkCompactUp();\n                }\n                else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n                    this.checkCompactUp();\n                    this.checkCompactRight();\n                }\n            }\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    GridsterCompact.prototype.checkCompactItem = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            if (this.gridster.$options.compactType !== CompactType.None) {\n                if (this.gridster.$options.compactType === CompactType.CompactUp) {\n                    this.moveUpTillCollision(item);\n                }\n                else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n                    this.moveLeftTillCollision(item);\n                }\n                else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n                    this.moveUpTillCollision(item);\n                    this.moveLeftTillCollision(item);\n                }\n                else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n                    this.moveLeftTillCollision(item);\n                    this.moveUpTillCollision(item);\n                }\n                else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n                    this.moveUpTillCollision(item);\n                    this.moveRightTillCollision(item);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterCompact.prototype.checkCompactUp = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var widgetMovedUp = false;\n            /** @type {?} */\n            var widget;\n            /** @type {?} */\n            var moved;\n            /** @type {?} */\n            var l = this.gridster.grid.length;\n            for (var i = 0; i < l; i++) {\n                widget = this.gridster.grid[i];\n                if (widget.$item.compactEnabled === false) {\n                    continue;\n                }\n                moved = this.moveUpTillCollision(widget.$item);\n                if (moved) {\n                    widgetMovedUp = true;\n                    widget.item.y = widget.$item.y;\n                    widget.itemChanged();\n                }\n            }\n            if (widgetMovedUp) {\n                this.checkCompact();\n            }\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    GridsterCompact.prototype.moveUpTillCollision = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            item.y -= 1;\n            if (this.gridster.checkCollision(item)) {\n                item.y += 1;\n                return false;\n            }\n            else {\n                this.moveUpTillCollision(item);\n                return true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterCompact.prototype.checkCompactLeft = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var widgetMovedUp = false;\n            /** @type {?} */\n            var widget;\n            /** @type {?} */\n            var moved;\n            /** @type {?} */\n            var l = this.gridster.grid.length;\n            for (var i = 0; i < l; i++) {\n                widget = this.gridster.grid[i];\n                if (widget.$item.compactEnabled === false) {\n                    continue;\n                }\n                moved = this.moveLeftTillCollision(widget.$item);\n                if (moved) {\n                    widgetMovedUp = true;\n                    widget.item.x = widget.$item.x;\n                    widget.itemChanged();\n                }\n            }\n            if (widgetMovedUp) {\n                this.checkCompact();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterCompact.prototype.checkCompactRight = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var widgetMovedUp = false;\n            /** @type {?} */\n            var widget;\n            /** @type {?} */\n            var moved;\n            /** @type {?} */\n            var l = this.gridster.grid.length;\n            for (var i = 0; i < l; i++) {\n                widget = this.gridster.grid[i];\n                if (widget.$item.compactEnabled === false) {\n                    continue;\n                }\n                moved = this.moveRightTillCollision(widget.$item);\n                if (moved) {\n                    widgetMovedUp = true;\n                    widget.item.x = widget.$item.x;\n                    widget.itemChanged();\n                }\n            }\n            if (widgetMovedUp) {\n                this.checkCompact();\n            }\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    GridsterCompact.prototype.moveLeftTillCollision = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            item.x -= 1;\n            if (this.gridster.checkCollision(item)) {\n                item.x += 1;\n                return false;\n            }\n            else {\n                this.moveLeftTillCollision(item);\n                return true;\n            }\n        };\n    return GridsterCompact;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterRenderer = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterRenderer(gridster) {\n        this.gridster = gridster;\n    }\n    /**\n     * @return {?}\n     */\n    GridsterRenderer.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            delete this.gridster;\n        };\n    /**\n     * @param {?} el\n     * @param {?} item\n     * @param {?} renderer\n     * @return {?}\n     */\n    GridsterRenderer.prototype.updateItem = /**\n     * @param {?} el\n     * @param {?} item\n     * @param {?} renderer\n     * @return {?}\n     */\n        function (el, item, renderer) {\n            if (this.gridster.mobile) {\n                renderer.setStyle(el, 'transform', '');\n                if (this.gridster.$options.keepFixedHeightInMobile) {\n                    renderer.setStyle(el, 'height', (item.rows * this.gridster.$options.fixedRowHeight) + 'px');\n                }\n                else {\n                    renderer.setStyle(el, 'height', (this.gridster.curWidth / 2 * item.rows) + 'px');\n                }\n                if (this.gridster.$options.keepFixedWidthInMobile) {\n                    renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n                }\n                else {\n                    renderer.setStyle(el, 'width', '');\n                }\n                renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n                renderer.setStyle(el, 'margin-right', '');\n            }\n            else {\n                /** @type {?} */\n                var x = Math.round(this.gridster.curColWidth * item.x);\n                /** @type {?} */\n                var y = Math.round(this.gridster.curRowHeight * item.y);\n                /** @type {?} */\n                var width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n                /** @type {?} */\n                var height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\n                /** @type {?} */\n                var transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n                renderer.setStyle(el, 'transform', transform);\n                renderer.setStyle(el, 'width', width + 'px');\n                renderer.setStyle(el, 'height', height + 'px');\n                /** @type {?} */\n                var marginBottom = null;\n                /** @type {?} */\n                var marginRight = null;\n                if (this.gridster.$options.outerMargin) {\n                    if (this.gridster.rows === item.rows + item.y) {\n                        if (this.gridster.$options.outerMarginBottom !== null) {\n                            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n                        }\n                        else {\n                            marginBottom = this.gridster.$options.margin + 'px';\n                        }\n                    }\n                    if (this.gridster.columns === item.cols + item.x) {\n                        if (this.gridster.$options.outerMarginBottom !== null) {\n                            marginRight = this.gridster.$options.outerMarginRight + 'px';\n                        }\n                        else {\n                            marginRight = this.gridster.$options.margin + 'px';\n                        }\n                    }\n                }\n                renderer.setStyle(el, 'margin-bottom', marginBottom);\n                renderer.setStyle(el, 'margin-right', marginRight);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterRenderer.prototype.updateGridster = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var addClass = '';\n            /** @type {?} */\n            var removeClass1 = '';\n            /** @type {?} */\n            var removeClass2 = '';\n            /** @type {?} */\n            var removeClass3 = '';\n            if (this.gridster.$options.gridType === GridType.Fit) {\n                addClass = GridType.Fit;\n                removeClass1 = GridType.ScrollVertical;\n                removeClass2 = GridType.ScrollHorizontal;\n                removeClass3 = GridType.Fixed;\n            }\n            else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n                this.gridster.curRowHeight = this.gridster.curColWidth;\n                addClass = GridType.ScrollVertical;\n                removeClass1 = GridType.Fit;\n                removeClass2 = GridType.ScrollHorizontal;\n                removeClass3 = GridType.Fixed;\n            }\n            else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n                this.gridster.curColWidth = this.gridster.curRowHeight;\n                addClass = GridType.ScrollHorizontal;\n                removeClass1 = GridType.Fit;\n                removeClass2 = GridType.ScrollVertical;\n                removeClass3 = GridType.Fixed;\n            }\n            else if (this.gridster.$options.gridType === GridType.Fixed) {\n                this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n                    (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n                this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n                    (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n                addClass = GridType.Fixed;\n                removeClass1 = GridType.Fit;\n                removeClass2 = GridType.ScrollVertical;\n                removeClass3 = GridType.ScrollHorizontal;\n            }\n            else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n                this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n                    (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n                addClass = GridType.ScrollVertical;\n                removeClass1 = GridType.Fit;\n                removeClass2 = GridType.ScrollHorizontal;\n                removeClass3 = GridType.Fixed;\n            }\n            else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n                this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n                    (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n                addClass = GridType.ScrollHorizontal;\n                removeClass1 = GridType.Fit;\n                removeClass2 = GridType.ScrollVertical;\n                removeClass3 = GridType.Fixed;\n            }\n            if (this.gridster.mobile) {\n                this.gridster.renderer.removeClass(this.gridster.el, addClass);\n            }\n            else {\n                this.gridster.renderer.addClass(this.gridster.el, addClass);\n            }\n            this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n            this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n            this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n        };\n    /**\n     * @param {?} i\n     * @return {?}\n     */\n    GridsterRenderer.prototype.getGridColumnStyle = /**\n     * @param {?} i\n     * @return {?}\n     */\n        function (i) {\n            return {\n                transform: 'translateX(' + this.gridster.curColWidth * i + 'px)',\n                width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n                height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n            };\n        };\n    /**\n     * @param {?} i\n     * @return {?}\n     */\n    GridsterRenderer.prototype.getGridRowStyle = /**\n     * @param {?} i\n     * @return {?}\n     */\n        function (i) {\n            return {\n                transform: 'translateY(' + this.gridster.curRowHeight * i + 'px)',\n                width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n                height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n            };\n        };\n    return GridsterRenderer;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterComponent = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterComponent(el, renderer, cdRef, zone) {\n        this.renderer = renderer;\n        this.cdRef = cdRef;\n        this.zone = zone;\n        this.gridColumns = [];\n        this.gridRows = [];\n        this.el = el.nativeElement;\n        this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n        this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n        this.mobile = false;\n        this.curWidth = 0;\n        this.curHeight = 0;\n        this.grid = [];\n        this.curColWidth = 0;\n        this.curRowHeight = 0;\n        this.dragInProgress = false;\n        this.emptyCell = new GridsterEmptyCell(this);\n        this.compact = new GridsterCompact(this);\n        this.gridRenderer = new GridsterRenderer(this);\n    }\n    /**\n     * @param {?} item\n     * @param {?} item2\n     * @return {?}\n     */\n    GridsterComponent.checkCollisionTwoItems = /**\n     * @param {?} item\n     * @param {?} item2\n     * @return {?}\n     */\n        function (item, item2) {\n            return item.x < item2.x + item2.cols\n                && item.x + item.cols > item2.x\n                && item.y < item2.y + item2.rows\n                && item.y + item.rows > item2.y;\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.options.initCallback) {\n                this.options.initCallback(this);\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    GridsterComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"options\"]) {\n                this.setOptions();\n                this.options.api = {\n                    optionsChanged: this.optionsChanged.bind(this),\n                    resize: this.onResize.bind(this),\n                    getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n                    getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n                    getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n                };\n                this.columns = this.$options.minCols;\n                this.rows = this.$options.minRows;\n                this.setGridSize();\n                this.calculateLayout();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.resize = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var height;\n            /** @type {?} */\n            var width;\n            if (this.$options.gridType === 'fit' && !this.mobile) {\n                width = this.el.offsetWidth;\n                height = this.el.offsetHeight;\n            }\n            else {\n                width = this.el.clientWidth;\n                height = this.el.clientHeight;\n            }\n            if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n                this.onResize();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.setOptions = /**\n     * @return {?}\n     */\n        function () {\n            this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n            if (!this.$options.disableWindowResize && !this.windowResize) {\n                this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n            }\n            else if (this.$options.disableWindowResize && this.windowResize) {\n                this.windowResize();\n                this.windowResize = null;\n            }\n            this.emptyCell.updateOptions();\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.optionsChanged = /**\n     * @return {?}\n     */\n        function () {\n            this.setOptions();\n            /** @type {?} */\n            var widgetsIndex = this.grid.length - 1;\n            /** @type {?} */\n            var widget;\n            for (; widgetsIndex >= 0; widgetsIndex--) {\n                widget = this.grid[widgetsIndex];\n                widget.updateOptions();\n            }\n            this.calculateLayout();\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.windowResize) {\n                this.windowResize();\n            }\n            if (this.options.destroyCallback) {\n                this.options.destroyCallback(this);\n            }\n            if (this.options.api) {\n                this.options.api.resize = undefined;\n                this.options.api.optionsChanged = undefined;\n                this.options.api.getNextPossiblePosition = undefined;\n                this.options.api = undefined;\n            }\n            this.emptyCell.destroy();\n            delete this.emptyCell;\n            this.compact.destroy();\n            delete this.compact;\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.onResize = /**\n     * @return {?}\n     */\n        function () {\n            this.setGridSize();\n            this.calculateLayout();\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.checkIfToResize = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var clientWidth = this.el.clientWidth;\n            /** @type {?} */\n            var offsetWidth = this.el.offsetWidth;\n            /** @type {?} */\n            var scrollWidth = this.el.scrollWidth;\n            /** @type {?} */\n            var clientHeight = this.el.clientHeight;\n            /** @type {?} */\n            var offsetHeight = this.el.offsetHeight;\n            /** @type {?} */\n            var scrollHeight = this.el.scrollHeight;\n            /** @type {?} */\n            var verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\n                && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n            /** @type {?} */\n            var horizontalScrollPresent = clientHeight < offsetHeight\n                && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n            if (verticalScrollPresent) {\n                return false;\n            }\n            return !horizontalScrollPresent;\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.setGridSize = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var el = this.el;\n            /** @type {?} */\n            var width = el.clientWidth;\n            /** @type {?} */\n            var height = el.clientHeight;\n            if (this.$options.setGridSize || this.$options.gridType === 'fit' && !this.mobile) {\n                width = el.offsetWidth;\n                height = el.offsetHeight;\n            }\n            else {\n                width = el.clientWidth;\n                height = el.clientHeight;\n            }\n            this.curWidth = width;\n            this.curHeight = height;\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.setGridDimensions = /**\n     * @return {?}\n     */\n        function () {\n            this.setGridSize();\n            if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n                this.mobile = !this.mobile;\n                this.renderer.addClass(this.el, 'mobile');\n            }\n            else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n                this.mobile = !this.mobile;\n                this.renderer.removeClass(this.el, 'mobile');\n            }\n            /** @type {?} */\n            var rows = this.$options.minRows;\n            /** @type {?} */\n            var columns = this.$options.minCols;\n            /** @type {?} */\n            var widgetsIndex = this.grid.length - 1;\n            /** @type {?} */\n            var widget;\n            for (; widgetsIndex >= 0; widgetsIndex--) {\n                widget = this.grid[widgetsIndex];\n                if (!widget.notPlaced) {\n                    rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n                    columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n                }\n            }\n            if (this.columns !== columns || this.rows !== rows) {\n                this.columns = columns;\n                this.rows = rows;\n                if (this.options.gridSizeChangedCallback) {\n                    this.options.gridSizeChangedCallback(this);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.calculateLayout = /**\n     * @return {?}\n     */\n        function () {\n            if (this.compact) {\n                this.compact.checkCompact();\n            }\n            this.setGridDimensions();\n            if (this.$options.outerMargin) {\n                /** @type {?} */\n                var marginWidth = -this.$options.margin;\n                if (this.$options.outerMarginLeft !== null) {\n                    marginWidth += this.$options.outerMarginLeft;\n                    this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n                }\n                else {\n                    marginWidth += this.$options.margin;\n                    this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n                }\n                if (this.$options.outerMarginRight !== null) {\n                    marginWidth += this.$options.outerMarginRight;\n                    this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n                }\n                else {\n                    marginWidth += this.$options.margin;\n                    this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n                }\n                this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n                /** @type {?} */\n                var marginHeight = -this.$options.margin;\n                if (this.$options.outerMarginTop !== null) {\n                    marginHeight += this.$options.outerMarginTop;\n                    this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n                }\n                else {\n                    marginHeight += this.$options.margin;\n                    this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n                }\n                if (this.$options.outerMarginBottom !== null) {\n                    marginHeight += this.$options.outerMarginBottom;\n                    this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n                }\n                else {\n                    marginHeight += this.$options.margin;\n                    this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n                }\n                this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\n            }\n            else {\n                this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n                this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\n                this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n                this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n                this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n                this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n            }\n            this.gridRenderer.updateGridster();\n            this.updateGrid();\n            if (this.$options.setGridSize) {\n                this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\n                this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\n            }\n            else {\n                this.renderer.setStyle(this.el, 'width', '');\n                this.renderer.setStyle(this.el, 'height', '');\n            }\n            /** @type {?} */\n            var widgetsIndex = this.grid.length - 1;\n            /** @type {?} */\n            var widget;\n            for (; widgetsIndex >= 0; widgetsIndex--) {\n                widget = this.grid[widgetsIndex];\n                widget.setSize();\n                widget.drag.toggle();\n                widget.resize.toggle();\n            }\n            setTimeout(this.resize.bind(this), 100);\n        };\n    /**\n     * @return {?}\n     */\n    GridsterComponent.prototype.updateGrid = /**\n     * @return {?}\n     */\n        function () {\n            if (this.$options.displayGrid === 'always' && !this.mobile) {\n                this.renderer.addClass(this.el, 'display-grid');\n            }\n            else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n                this.renderer.addClass(this.el, 'display-grid');\n            }\n            else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n                this.renderer.removeClass(this.el, 'display-grid');\n            }\n            this.setGridDimensions();\n            this.gridColumns.length = Math.max(this.columns, Math.floor(this.curWidth / this.curColWidth)) || 0;\n            this.gridRows.length = Math.max(this.rows, Math.floor(this.curHeight / this.curRowHeight)) || 0;\n            this.cdRef.markForCheck();\n        };\n    /**\n     * @param {?} itemComponent\n     * @return {?}\n     */\n    GridsterComponent.prototype.addItem = /**\n     * @param {?} itemComponent\n     * @return {?}\n     */\n        function (itemComponent) {\n            if (itemComponent.$item.cols === undefined) {\n                itemComponent.$item.cols = this.$options.defaultItemCols;\n                itemComponent.item.cols = itemComponent.$item.cols;\n                itemComponent.itemChanged();\n            }\n            if (itemComponent.$item.rows === undefined) {\n                itemComponent.$item.rows = this.$options.defaultItemRows;\n                itemComponent.item.rows = itemComponent.$item.rows;\n                itemComponent.itemChanged();\n            }\n            if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n                this.autoPositionItem(itemComponent);\n            }\n            else if (this.checkCollision(itemComponent.$item)) {\n                if (!this.$options.disableWarnings) {\n                    itemComponent.notPlaced = true;\n                    console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\n                        JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n                }\n                if (!this.$options.disableAutoPositionOnConflict) {\n                    this.autoPositionItem(itemComponent);\n                }\n                else {\n                    itemComponent.notPlaced = true;\n                }\n            }\n            this.grid.push(itemComponent);\n            this.calculateLayoutDebounce();\n        };\n    /**\n     * @param {?} itemComponent\n     * @return {?}\n     */\n    GridsterComponent.prototype.removeItem = /**\n     * @param {?} itemComponent\n     * @return {?}\n     */\n        function (itemComponent) {\n            this.grid.splice(this.grid.indexOf(itemComponent), 1);\n            this.calculateLayoutDebounce();\n            if (this.options.itemRemovedCallback) {\n                this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n            }\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    GridsterComponent.prototype.checkCollision = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            /** @type {?} */\n            var collision = false;\n            if (this.options.itemValidateCallback) {\n                collision = !this.options.itemValidateCallback(item);\n            }\n            if (!collision && this.checkGridCollision(item)) {\n                collision = true;\n            }\n            if (!collision) {\n                /** @type {?} */\n                var c = this.findItemWithItem(item);\n                if (c) {\n                    collision = c;\n                }\n            }\n            return collision;\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    GridsterComponent.prototype.checkGridCollision = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            /** @type {?} */\n            var noNegativePosition = item.y > -1 && item.x > -1;\n            /** @type {?} */\n            var maxGridCols = item.cols + item.x <= this.$options.maxCols;\n            /** @type {?} */\n            var maxGridRows = item.rows + item.y <= this.$options.maxRows;\n            /** @type {?} */\n            var maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n            /** @type {?} */\n            var minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n            /** @type {?} */\n            var maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n            /** @type {?} */\n            var minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n            /** @type {?} */\n            var inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n            /** @type {?} */\n            var inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n            /** @type {?} */\n            var minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n            /** @type {?} */\n            var maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n            /** @type {?} */\n            var area = item.cols * item.rows;\n            /** @type {?} */\n            var inMinArea = minAreaLimit <= area;\n            /** @type {?} */\n            var inMaxArea = maxAreaLimit >= area;\n            return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    GridsterComponent.prototype.findItemWithItem = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            /** @type {?} */\n            var widgetsIndex = this.grid.length - 1;\n            /** @type {?} */\n            var widget;\n            for (; widgetsIndex > -1; widgetsIndex--) {\n                widget = this.grid[widgetsIndex];\n                if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n                    return widget;\n                }\n            }\n            return false;\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    GridsterComponent.prototype.findItemsWithItem = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            /** @type {?} */\n            var a = [];\n            /** @type {?} */\n            var widgetsIndex = this.grid.length - 1;\n            /** @type {?} */\n            var widget;\n            for (; widgetsIndex > -1; widgetsIndex--) {\n                widget = this.grid[widgetsIndex];\n                if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n                    a.push(widget);\n                }\n            }\n            return a;\n        };\n    /**\n     * @param {?} itemComponent\n     * @return {?}\n     */\n    GridsterComponent.prototype.autoPositionItem = /**\n     * @param {?} itemComponent\n     * @return {?}\n     */\n        function (itemComponent) {\n            if (this.getNextPossiblePosition(itemComponent.$item)) {\n                itemComponent.notPlaced = false;\n                itemComponent.item.x = itemComponent.$item.x;\n                itemComponent.item.y = itemComponent.$item.y;\n                itemComponent.itemChanged();\n            }\n            else {\n                itemComponent.notPlaced = true;\n                if (!this.$options.disableWarnings) {\n                    console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\n                        JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n                }\n            }\n        };\n    /**\n     * @param {?} newItem\n     * @param {?=} startingFrom\n     * @return {?}\n     */\n    GridsterComponent.prototype.getNextPossiblePosition = /**\n     * @param {?} newItem\n     * @param {?=} startingFrom\n     * @return {?}\n     */\n        function (newItem, startingFrom) {\n            if (startingFrom === void 0) {\n                startingFrom = {};\n            }\n            if (newItem.cols === -1) {\n                newItem.cols = this.$options.defaultItemCols;\n            }\n            if (newItem.rows === -1) {\n                newItem.rows = this.$options.defaultItemRows;\n            }\n            this.setGridDimensions();\n            /** @type {?} */\n            var rowsIndex = startingFrom.y || 0;\n            /** @type {?} */\n            var colsIndex;\n            for (; rowsIndex < this.rows; rowsIndex++) {\n                newItem.y = rowsIndex;\n                colsIndex = startingFrom.x || 0;\n                for (; colsIndex < this.columns; colsIndex++) {\n                    newItem.x = colsIndex;\n                    if (!this.checkCollision(newItem)) {\n                        return true;\n                    }\n                }\n            }\n            /** @type {?} */\n            var canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n            /** @type {?} */\n            var canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n            /** @type {?} */\n            var addToRows = this.rows <= this.columns && canAddToRows;\n            if (!addToRows && canAddToColumns) {\n                newItem.x = this.columns;\n                newItem.y = 0;\n                return true;\n            }\n            else if (canAddToRows) {\n                newItem.y = this.rows;\n                newItem.x = 0;\n                return true;\n            }\n            return false;\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    GridsterComponent.prototype.getFirstPossiblePosition = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            /** @type {?} */\n            var tmpItem = Object.assign({}, item);\n            this.getNextPossiblePosition(tmpItem);\n            return tmpItem;\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    GridsterComponent.prototype.getLastPossiblePosition = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            /** @type {?} */\n            var farthestItem = { y: 0, x: 0 };\n            farthestItem = this.grid.reduce(function (prev, curr) {\n                /** @type {?} */\n                var currCoords = { y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1 };\n                if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n                    return currCoords;\n                }\n                else {\n                    return prev;\n                }\n            }, farthestItem);\n            /** @type {?} */\n            var tmpItem = Object.assign({}, item);\n            this.getNextPossiblePosition(tmpItem, farthestItem);\n            return tmpItem;\n        };\n    /**\n     * @param {?} x\n     * @param {?} roundingMethod\n     * @param {?=} noLimit\n     * @return {?}\n     */\n    GridsterComponent.prototype.pixelsToPositionX = /**\n     * @param {?} x\n     * @param {?} roundingMethod\n     * @param {?=} noLimit\n     * @return {?}\n     */\n        function (x, roundingMethod, noLimit) {\n            /** @type {?} */\n            var position = roundingMethod(x / this.curColWidth);\n            if (noLimit) {\n                return position;\n            }\n            else {\n                return Math.max(position, 0);\n            }\n        };\n    /**\n     * @param {?} y\n     * @param {?} roundingMethod\n     * @param {?=} noLimit\n     * @return {?}\n     */\n    GridsterComponent.prototype.pixelsToPositionY = /**\n     * @param {?} y\n     * @param {?} roundingMethod\n     * @param {?=} noLimit\n     * @return {?}\n     */\n        function (y, roundingMethod, noLimit) {\n            /** @type {?} */\n            var position = roundingMethod(y / this.curRowHeight);\n            if (noLimit) {\n                return position;\n            }\n            else {\n                return Math.max(position, 0);\n            }\n        };\n    /**\n     * @param {?} x\n     * @return {?}\n     */\n    GridsterComponent.prototype.positionXToPixels = /**\n     * @param {?} x\n     * @return {?}\n     */\n        function (x) {\n            return x * this.curColWidth;\n        };\n    /**\n     * @param {?} y\n     * @return {?}\n     */\n    GridsterComponent.prototype.positionYToPixels = /**\n     * @param {?} y\n     * @return {?}\n     */\n        function (y) {\n            return y * this.curRowHeight;\n        };\n    return GridsterComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */ GridsterItemComponentInterface = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterItemComponentInterface() {\n    }\n    return GridsterItemComponentInterface;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterSwap = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterSwap(gridsterItem) {\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n    }\n    /**\n     * @return {?}\n     */\n    GridsterSwap.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            delete this.gridster;\n            delete this.gridsterItem;\n            delete this.swapedItem;\n        };\n    /**\n     * @return {?}\n     */\n    GridsterSwap.prototype.swapItems = /**\n     * @return {?}\n     */\n        function () {\n            if (this.gridster.$options.swap) {\n                this.checkSwapBack();\n                this.checkSwap(this.gridsterItem);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterSwap.prototype.checkSwapBack = /**\n     * @return {?}\n     */\n        function () {\n            if (this.swapedItem) {\n                /** @type {?} */\n                var x = this.swapedItem.$item.x;\n                /** @type {?} */\n                var y = this.swapedItem.$item.y;\n                this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n                this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n                if (this.gridster.checkCollision(this.swapedItem.$item)) {\n                    this.swapedItem.$item.x = x;\n                    this.swapedItem.$item.y = y;\n                }\n                else {\n                    this.swapedItem.setSize();\n                    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n                    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n                    this.swapedItem = undefined;\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterSwap.prototype.restoreSwapItem = /**\n     * @return {?}\n     */\n        function () {\n            if (this.swapedItem) {\n                this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n                this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n                this.swapedItem.setSize();\n                this.swapedItem = undefined;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterSwap.prototype.setSwapItem = /**\n     * @return {?}\n     */\n        function () {\n            if (this.swapedItem) {\n                this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n                this.swapedItem = undefined;\n            }\n        };\n    /**\n     * @param {?} pushedBy\n     * @return {?}\n     */\n    GridsterSwap.prototype.checkSwap = /**\n     * @param {?} pushedBy\n     * @return {?}\n     */\n        function (pushedBy) {\n            /** @type {?} */\n            var gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n            if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n                /** @type {?} */\n                var gridsterItemCollide = gridsterItemCollision;\n                /** @type {?} */\n                var copyCollisionX = gridsterItemCollide.$item.x;\n                /** @type {?} */\n                var copyCollisionY = gridsterItemCollide.$item.y;\n                /** @type {?} */\n                var copyX = pushedBy.$item.x;\n                /** @type {?} */\n                var copyY = pushedBy.$item.y;\n                gridsterItemCollide.$item.x = pushedBy.item.x || 0;\n                gridsterItemCollide.$item.y = pushedBy.item.y || 0;\n                pushedBy.$item.x = gridsterItemCollide.item.x || 0;\n                pushedBy.$item.y = gridsterItemCollide.item.y || 0;\n                if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n                    pushedBy.$item.x = copyX;\n                    pushedBy.$item.y = copyY;\n                    gridsterItemCollide.$item.x = copyCollisionX;\n                    gridsterItemCollide.$item.y = copyCollisionY;\n                }\n                else {\n                    gridsterItemCollide.setSize();\n                    this.swapedItem = gridsterItemCollide;\n                }\n            }\n        };\n    return GridsterSwap;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar scrollSensitivity;\n/** @type {?} */\nvar scrollSpeed;\n/** @type {?} */\nvar intervalDuration = 50;\n/** @type {?} */\nvar gridsterElement;\n/** @type {?} */\nvar resizeEvent;\n/** @type {?} */\nvar resizeEventType;\n/** @type {?} */\nvar intervalE;\n/** @type {?} */\nvar intervalW;\n/** @type {?} */\nvar intervalN;\n/** @type {?} */\nvar intervalS;\n/**\n * @param {?} gridster\n * @param {?} left\n * @param {?} top\n * @param {?} width\n * @param {?} height\n * @param {?} e\n * @param {?} lastMouse\n * @param {?} calculateItemPosition\n * @param {?=} resize\n * @param {?=} resizeEventScrollType\n * @return {?}\n */\nfunction scroll(gridster, left, top, width, height, e, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n    scrollSensitivity = gridster.$options.scrollSensitivity;\n    scrollSpeed = gridster.$options.scrollSpeed;\n    gridsterElement = gridster.el;\n    resizeEvent = resize;\n    resizeEventType = resizeEventScrollType;\n    /** @type {?} */\n    var offsetWidth = gridsterElement.offsetWidth;\n    /** @type {?} */\n    var offsetHeight = gridsterElement.offsetHeight;\n    /** @type {?} */\n    var offsetLeft = gridsterElement.scrollLeft;\n    /** @type {?} */\n    var offsetTop = gridsterElement.scrollTop;\n    /** @type {?} */\n    var elemTopOffset = top - offsetTop;\n    /** @type {?} */\n    var elemBottomOffset = offsetHeight + offsetTop - top - height;\n    if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n        cancelN();\n        if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\n            return;\n        }\n        intervalS = startVertical(1, calculateItemPosition, lastMouse);\n    }\n    else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n        cancelS();\n        if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\n            return;\n        }\n        intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n    }\n    else if (lastMouse.clientY !== e.clientY) {\n        cancelVertical();\n    }\n    /** @type {?} */\n    var elemRightOffset = offsetLeft + offsetWidth - left - width;\n    /** @type {?} */\n    var elemLeftOffset = left - offsetLeft;\n    if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n        cancelW();\n        if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\n            return;\n        }\n        intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n    }\n    else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n        cancelE();\n        if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\n            return;\n        }\n        intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n    }\n    else if (lastMouse.clientX !== e.clientX) {\n        cancelHorizontal();\n    }\n}\n/**\n * @param {?} sign\n * @param {?} calculateItemPosition\n * @param {?} lastMouse\n * @return {?}\n */\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n    /** @type {?} */\n    var clientY = lastMouse.clientY;\n    return setInterval(function () {\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n            cancelVertical();\n        }\n        gridsterElement.scrollTop += sign * scrollSpeed;\n        clientY += sign * scrollSpeed;\n        calculateItemPosition({ clientX: lastMouse.clientX, clientY: clientY });\n    }, intervalDuration);\n}\n/**\n * @param {?} sign\n * @param {?} calculateItemPosition\n * @param {?} lastMouse\n * @return {?}\n */\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n    /** @type {?} */\n    var clientX = lastMouse.clientX;\n    return setInterval(function () {\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n            cancelHorizontal();\n        }\n        gridsterElement.scrollLeft += sign * scrollSpeed;\n        clientX += sign * scrollSpeed;\n        calculateItemPosition({ clientX: clientX, clientY: lastMouse.clientY });\n    }, intervalDuration);\n}\n/**\n * @return {?}\n */\nfunction cancelScroll() {\n    cancelHorizontal();\n    cancelVertical();\n    gridsterElement = undefined;\n}\n/**\n * @return {?}\n */\nfunction cancelHorizontal() {\n    cancelE();\n    cancelW();\n}\n/**\n * @return {?}\n */\nfunction cancelVertical() {\n    cancelN();\n    cancelS();\n}\n/**\n * @return {?}\n */\nfunction cancelE() {\n    if (intervalE) {\n        clearInterval(intervalE);\n        intervalE = 0;\n    }\n}\n/**\n * @return {?}\n */\nfunction cancelW() {\n    if (intervalW) {\n        clearInterval(intervalW);\n        intervalW = 0;\n    }\n}\n/**\n * @return {?}\n */\nfunction cancelS() {\n    if (intervalS) {\n        clearInterval(intervalS);\n        intervalS = 0;\n    }\n}\n/**\n * @return {?}\n */\nfunction cancelN() {\n    if (intervalN) {\n        clearInterval(intervalN);\n        intervalN = 0;\n    }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterPush = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterPush(gridsterItem) {\n        this.pushedItems = [];\n        this.pushedItemsTemp = [];\n        this.pushedItemsTempPath = [];\n        this.pushedItemsPath = [];\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n        this.tryPattern = {\n            fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n            fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n            fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n            fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n        };\n        this.fromSouth = 'fromSouth';\n        this.fromNorth = 'fromNorth';\n        this.fromEast = 'fromEast';\n        this.fromWest = 'fromWest';\n    }\n    /**\n     * @return {?}\n     */\n    GridsterPush.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            delete this.gridster;\n            delete this.gridsterItem;\n        };\n    /**\n     * @param {?} direction\n     * @param {?=} disable\n     * @return {?}\n     */\n    GridsterPush.prototype.pushItems = /**\n     * @param {?} direction\n     * @param {?=} disable\n     * @return {?}\n     */\n        function (direction, disable) {\n            if (this.gridster.$options.pushItems && !disable) {\n                this.pushedItemsOrder = [];\n                /** @type {?} */\n                var pushed = this.push(this.gridsterItem, direction);\n                if (!pushed) {\n                    this.restoreTempItems();\n                }\n                this.pushedItemsOrder = [];\n                this.pushedItemsTemp = [];\n                this.pushedItemsTempPath = [];\n                return pushed;\n            }\n            else {\n                return false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterPush.prototype.restoreTempItems = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var i = this.pushedItemsTemp.length - 1;\n            for (; i > -1; i--) {\n                this.removeFromTempPushed(this.pushedItemsTemp[i]);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterPush.prototype.restoreItems = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var i = 0;\n            /** @type {?} */\n            var l = this.pushedItems.length;\n            /** @type {?} */\n            var pushedItem;\n            for (; i < l; i++) {\n                pushedItem = this.pushedItems[i];\n                pushedItem.$item.x = pushedItem.item.x || 0;\n                pushedItem.$item.y = pushedItem.item.y || 0;\n                pushedItem.setSize();\n            }\n            this.pushedItems = [];\n            this.pushedItemsPath = [];\n        };\n    /**\n     * @return {?}\n     */\n    GridsterPush.prototype.setPushedItems = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var i = 0;\n            /** @type {?} */\n            var l = this.pushedItems.length;\n            /** @type {?} */\n            var pushedItem;\n            for (; i < l; i++) {\n                pushedItem = this.pushedItems[i];\n                pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n            }\n            this.pushedItems = [];\n            this.pushedItemsPath = [];\n        };\n    /**\n     * @return {?}\n     */\n    GridsterPush.prototype.checkPushBack = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var i = this.pushedItems.length - 1;\n            /** @type {?} */\n            var change = false;\n            for (; i > -1; i--) {\n                if (this.checkPushedItem(this.pushedItems[i], i)) {\n                    change = true;\n                }\n            }\n            if (change) {\n                this.checkPushBack();\n            }\n        };\n    /**\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    GridsterPush.prototype.push = /**\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n        function (gridsterItem, direction) {\n            if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n                return false;\n            }\n            if (direction === '') {\n                return false;\n            }\n            /** @type {?} */\n            var a = this.gridster.findItemsWithItem(gridsterItem.$item);\n            /** @type {?} */\n            var i = a.length - 1;\n            /** @type {?} */\n            var itemCollision;\n            /** @type {?} */\n            var makePush = true;\n            /** @type {?} */\n            var b = [];\n            for (; i > -1; i--) {\n                itemCollision = a[i];\n                if (itemCollision === this.gridsterItem) {\n                    makePush = false;\n                    break;\n                }\n                if (!itemCollision.canBeDragged()) {\n                    makePush = false;\n                    break;\n                }\n                /** @type {?} */\n                var compare = this.pushedItemsTemp.find(function (el) {\n                    return el.$item.x === itemCollision.$item.x && el.$item.y === itemCollision.$item.y;\n                });\n                if (compare) {\n                    makePush = false;\n                    break;\n                }\n                if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n                    this.pushedItemsOrder.push(itemCollision);\n                    b.push(itemCollision);\n                }\n                else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n                    this.pushedItemsOrder.push(itemCollision);\n                    b.push(itemCollision);\n                }\n                else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n                    this.pushedItemsOrder.push(itemCollision);\n                    b.push(itemCollision);\n                }\n                else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n                    this.pushedItemsOrder.push(itemCollision);\n                    b.push(itemCollision);\n                }\n                else {\n                    makePush = false;\n                    break;\n                }\n            }\n            if (!makePush) {\n                i = this.pushedItemsOrder.lastIndexOf(b[0]);\n                if (i > -1) {\n                    /** @type {?} */\n                    var j = this.pushedItemsOrder.length - 1;\n                    for (; j >= i; j--) {\n                        itemCollision = this.pushedItemsOrder[j];\n                        this.pushedItemsOrder.pop();\n                        this.removeFromTempPushed(itemCollision);\n                        this.removeFromPushedItem(itemCollision);\n                    }\n                }\n            }\n            return makePush;\n        };\n    /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    GridsterPush.prototype.trySouth = /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n        function (gridsterItemCollide, gridsterItem) {\n            if (!this.gridster.$options.pushDirections.south) {\n                return false;\n            }\n            this.addToTempPushed(gridsterItemCollide);\n            gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n            if (this.push(gridsterItemCollide, this.fromNorth)) {\n                gridsterItemCollide.setSize();\n                this.addToPushed(gridsterItemCollide);\n                return true;\n            }\n            else {\n                this.removeFromTempPushed(gridsterItemCollide);\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    GridsterPush.prototype.tryNorth = /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n        function (gridsterItemCollide, gridsterItem) {\n            if (!this.gridster.$options.pushDirections.north) {\n                return false;\n            }\n            this.addToTempPushed(gridsterItemCollide);\n            gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n            if (this.push(gridsterItemCollide, this.fromSouth)) {\n                gridsterItemCollide.setSize();\n                this.addToPushed(gridsterItemCollide);\n                return true;\n            }\n            else {\n                this.removeFromTempPushed(gridsterItemCollide);\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    GridsterPush.prototype.tryEast = /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n        function (gridsterItemCollide, gridsterItem) {\n            if (!this.gridster.$options.pushDirections.east) {\n                return false;\n            }\n            this.addToTempPushed(gridsterItemCollide);\n            gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n            if (this.push(gridsterItemCollide, this.fromWest)) {\n                gridsterItemCollide.setSize();\n                this.addToPushed(gridsterItemCollide);\n                return true;\n            }\n            else {\n                this.removeFromTempPushed(gridsterItemCollide);\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    GridsterPush.prototype.tryWest = /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n        function (gridsterItemCollide, gridsterItem) {\n            if (!this.gridster.$options.pushDirections.west) {\n                return false;\n            }\n            this.addToTempPushed(gridsterItemCollide);\n            gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n            if (this.push(gridsterItemCollide, this.fromEast)) {\n                gridsterItemCollide.setSize();\n                this.addToPushed(gridsterItemCollide);\n                return true;\n            }\n            else {\n                this.removeFromTempPushed(gridsterItemCollide);\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    GridsterPush.prototype.addToTempPushed = /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n        function (gridsterItem) {\n            /** @type {?} */\n            var i = this.pushedItemsTemp.indexOf(gridsterItem);\n            if (i === -1) {\n                i = this.pushedItemsTemp.push(gridsterItem) - 1;\n                this.pushedItemsTempPath[i] = [];\n            }\n            this.pushedItemsTempPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\n        };\n    /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    GridsterPush.prototype.removeFromTempPushed = /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n        function (gridsterItem) {\n            /** @type {?} */\n            var i = this.pushedItemsTemp.indexOf(gridsterItem);\n            /** @type {?} */\n            var tempPosition = this.pushedItemsTempPath[i].pop();\n            if (!tempPosition) {\n                return;\n            }\n            gridsterItem.$item.x = tempPosition.x;\n            gridsterItem.$item.y = tempPosition.y;\n            gridsterItem.setSize();\n            if (!this.pushedItemsTempPath[i].length) {\n                this.pushedItemsTemp.splice(i, 1);\n                this.pushedItemsTempPath.splice(i, 1);\n            }\n        };\n    /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    GridsterPush.prototype.addToPushed = /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n        function (gridsterItem) {\n            if (this.pushedItems.indexOf(gridsterItem) < 0) {\n                this.pushedItems.push(gridsterItem);\n                this.pushedItemsPath.push([{ x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0 },\n                    { x: gridsterItem.$item.x, y: gridsterItem.$item.y }]);\n            }\n            else {\n                /** @type {?} */\n                var i = this.pushedItems.indexOf(gridsterItem);\n                this.pushedItemsPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\n            }\n        };\n    /**\n     * @param {?} i\n     * @return {?}\n     */\n    GridsterPush.prototype.removeFromPushed = /**\n     * @param {?} i\n     * @return {?}\n     */\n        function (i) {\n            if (i > -1) {\n                this.pushedItems.splice(i, 1);\n                this.pushedItemsPath.splice(i, 1);\n            }\n        };\n    /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    GridsterPush.prototype.removeFromPushedItem = /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n        function (gridsterItem) {\n            /** @type {?} */\n            var i = this.pushedItems.indexOf(gridsterItem);\n            if (i > -1) {\n                this.pushedItemsPath[i].pop();\n                if (!this.pushedItemsPath.length) {\n                    this.pushedItems.splice(i, 1);\n                    this.pushedItemsPath.splice(i, 1);\n                }\n            }\n        };\n    /**\n     * @param {?} pushedItem\n     * @param {?} i\n     * @return {?}\n     */\n    GridsterPush.prototype.checkPushedItem = /**\n     * @param {?} pushedItem\n     * @param {?} i\n     * @return {?}\n     */\n        function (pushedItem, i) {\n            /** @type {?} */\n            var path = this.pushedItemsPath[i];\n            /** @type {?} */\n            var j = path.length - 2;\n            /** @type {?} */\n            var lastPosition;\n            /** @type {?} */\n            var x;\n            /** @type {?} */\n            var y;\n            /** @type {?} */\n            var change = false;\n            for (; j > -1; j--) {\n                lastPosition = path[j];\n                x = pushedItem.$item.x;\n                y = pushedItem.$item.y;\n                pushedItem.$item.x = lastPosition.x;\n                pushedItem.$item.y = lastPosition.y;\n                if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n                    pushedItem.setSize();\n                    path.splice(j + 1, path.length - j - 1);\n                    change = true;\n                }\n                else {\n                    pushedItem.$item.x = x;\n                    pushedItem.$item.y = y;\n                }\n            }\n            if (path.length < 2) {\n                this.removeFromPushed(i);\n            }\n            return change;\n        };\n    return GridsterPush;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterDraggable = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterDraggable(gridsterItem, gridster, zone) {\n        this.zone = zone;\n        this.collision = false;\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridster;\n        this.lastMouse = {\n            clientX: 0,\n            clientY: 0\n        };\n        this.path = [];\n    }\n    /**\n     * @return {?}\n     */\n    GridsterDraggable.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.gridster.previewStyle) {\n                this.gridster.previewStyle(true);\n            }\n            delete this.gridsterItem;\n            delete this.gridster;\n            delete this.collision;\n            if (this.mousedown) {\n                this.mousedown();\n                this.touchstart();\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterDraggable.prototype.dragStart = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            switch (e.which) {\n                case 1:\n                    // left mouse button\n                    break;\n                case 2:\n                case 3:\n                    // right or middle mouse button\n                    return;\n            }\n            if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n                this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n            }\n            e.stopPropagation();\n            e.preventDefault();\n            this.dragFunction = this.dragMove.bind(this);\n            this.dragStopFunction = this.dragStop.bind(this);\n            this.zone.runOutsideAngular(function () {\n                _this.mousemove = _this.gridsterItem.renderer.listen('document', 'mousemove', _this.dragFunction);\n                _this.touchmove = _this.gridster.renderer.listen(_this.gridster.el, 'touchmove', _this.dragFunction);\n            });\n            this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n            this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n            this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n            this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n            this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n            this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n            this.margin = this.gridster.$options.margin;\n            this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n            this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n            this.left = this.gridsterItem.left - this.margin;\n            this.top = this.gridsterItem.top - this.margin;\n            this.width = this.gridsterItem.width;\n            this.height = this.gridsterItem.height;\n            this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n            this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n            this.gridster.movingItem = this.gridsterItem.$item;\n            this.gridster.previewStyle(true);\n            this.push = new GridsterPush(this.gridsterItem);\n            this.swap = new GridsterSwap(this.gridsterItem);\n            this.gridster.dragInProgress = true;\n            this.gridster.updateGrid();\n            this.path.push({ x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0 });\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterDraggable.prototype.dragMove = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.stopPropagation();\n            e.preventDefault();\n            GridsterUtils.checkTouchEvent(e);\n            this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n            this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n            scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition.bind(this));\n            this.calculateItemPositionFromMousePosition(e);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterDraggable.prototype.calculateItemPositionFromMousePosition = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            this.left = e.clientX + this.offsetLeft - this.diffLeft;\n            this.top = e.clientY + this.offsetTop - this.diffTop;\n            this.calculateItemPosition();\n            this.lastMouse.clientX = e.clientX;\n            this.lastMouse.clientY = e.clientY;\n            this.zone.run(function () {\n                _this.gridster.updateGrid();\n            });\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterDraggable.prototype.dragStop = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            e.stopPropagation();\n            e.preventDefault();\n            cancelScroll();\n            this.cancelOnBlur();\n            this.mousemove();\n            this.mouseup();\n            this.mouseleave();\n            this.touchmove();\n            this.touchend();\n            this.touchcancel();\n            this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n            this.gridster.dragInProgress = false;\n            this.gridster.updateGrid();\n            this.path = [];\n            if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n                Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\n                    .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n            }\n            else {\n                this.makeDrag();\n            }\n            setTimeout(function () {\n                if (_this.gridster) {\n                    _this.gridster.movingItem = null;\n                    _this.gridster.previewStyle(true);\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    GridsterDraggable.prototype.cancelDrag = /**\n     * @return {?}\n     */\n        function () {\n            this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n            this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n            this.gridsterItem.setSize();\n            if (this.push) {\n                this.push.restoreItems();\n            }\n            if (this.swap) {\n                this.swap.restoreSwapItem();\n            }\n            if (this.push) {\n                this.push.destroy();\n                delete this.push;\n            }\n            if (this.swap) {\n                this.swap.destroy();\n                delete this.swap;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterDraggable.prototype.makeDrag = /**\n     * @return {?}\n     */\n        function () {\n            if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\n                && this.gridster.options.draggable.dropOverItemsCallback\n                && this.collision && this.collision !== true && this.collision.$item) {\n                this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n            }\n            this.collision = false;\n            this.gridsterItem.setSize();\n            this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n            if (this.push) {\n                this.push.setPushedItems();\n            }\n            if (this.swap) {\n                this.swap.setSwapItem();\n            }\n            if (this.push) {\n                this.push.destroy();\n                delete this.push;\n            }\n            if (this.swap) {\n                this.swap.destroy();\n                delete this.swap;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterDraggable.prototype.calculateItemPosition = /**\n     * @return {?}\n     */\n        function () {\n            this.gridster.movingItem = this.gridsterItem.$item;\n            this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n            this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n            this.positionXBackup = this.gridsterItem.$item.x;\n            this.positionYBackup = this.gridsterItem.$item.y;\n            this.gridsterItem.$item.x = this.positionX;\n            if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.x = this.positionXBackup;\n            }\n            this.gridsterItem.$item.y = this.positionY;\n            if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.y = this.positionYBackup;\n            }\n            /** @type {?} */\n            var transform = 'translate(' + this.left + 'px, ' + this.top + 'px)';\n            this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n            if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n                /** @type {?} */\n                var lastPosition = this.path[this.path.length - 1];\n                /** @type {?} */\n                var direction = '';\n                if (lastPosition.x < this.gridsterItem.$item.x) {\n                    direction = this.push.fromWest;\n                }\n                else if (lastPosition.x > this.gridsterItem.$item.x) {\n                    direction = this.push.fromEast;\n                }\n                else if (lastPosition.y < this.gridsterItem.$item.y) {\n                    direction = this.push.fromNorth;\n                }\n                else if (lastPosition.y > this.gridsterItem.$item.y) {\n                    direction = this.push.fromSouth;\n                }\n                this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n                this.swap.swapItems();\n                this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n                if (this.collision) {\n                    this.gridsterItem.$item.x = this.positionXBackup;\n                    this.gridsterItem.$item.y = this.positionYBackup;\n                    if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n                        this.gridster.movingItem = null;\n                    }\n                }\n                else {\n                    this.path.push({ x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y });\n                }\n                this.push.checkPushBack();\n            }\n            this.gridster.previewStyle(true);\n        };\n    /**\n     * @return {?}\n     */\n    GridsterDraggable.prototype.toggle = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var enableDrag = this.gridsterItem.canBeDragged();\n            if (!this.enabled && enableDrag) {\n                this.enabled = !this.enabled;\n                this.dragStartFunction = this.dragStartDelay.bind(this);\n                this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n                this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n            }\n            else if (this.enabled && !enableDrag) {\n                this.enabled = !this.enabled;\n                this.mousedown();\n                this.touchstart();\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterDraggable.prototype.dragStartDelay = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n                return;\n            }\n            if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n                return;\n            }\n            GridsterUtils.checkTouchEvent(e);\n            if (!this.gridster.$options.draggable.delayStart) {\n                this.dragStart(e);\n                return;\n            }\n            /** @type {?} */\n            var timeout = setTimeout(function () {\n                _this.dragStart(e);\n                cancelDrag();\n            }, this.gridster.$options.draggable.delayStart);\n            /** @type {?} */\n            var cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n            /** @type {?} */\n            var cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n            /** @type {?} */\n            var cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n            /** @type {?} */\n            var cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n            /** @type {?} */\n            var cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n            /** @type {?} */\n            var cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n            /**\n             * @param {?} eventMove\n             * @return {?}\n             */\n            function cancelMove(eventMove) {\n                GridsterUtils.checkTouchEvent(eventMove);\n                if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n                    cancelDrag();\n                }\n            }\n            /**\n             * @return {?}\n             */\n            function cancelDrag() {\n                clearTimeout(timeout);\n                cancelOnBlur();\n                cancelMouse();\n                cancelMouseLeave();\n                cancelTouchMove();\n                cancelTouchEnd();\n                cancelTouchCancel();\n            }\n        };\n    return GridsterDraggable;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterPushResize = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterPushResize(gridsterItem) {\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n        this.tryPattern = {\n            fromEast: this.tryWest,\n            fromWest: this.tryEast,\n            fromNorth: this.trySouth,\n            fromSouth: this.tryNorth\n        };\n        this.fromSouth = 'fromSouth';\n        this.fromNorth = 'fromNorth';\n        this.fromEast = 'fromEast';\n        this.fromWest = 'fromWest';\n    }\n    /**\n     * @return {?}\n     */\n    GridsterPushResize.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            delete this.gridster;\n            delete this.gridsterItem;\n        };\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    GridsterPushResize.prototype.pushItems = /**\n     * @param {?} direction\n     * @return {?}\n     */\n        function (direction) {\n            if (this.gridster.$options.pushResizeItems) {\n                return this.push(this.gridsterItem, direction);\n            }\n            else {\n                return false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterPushResize.prototype.restoreItems = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var i = 0;\n            /** @type {?} */\n            var l = this.pushedItems.length;\n            /** @type {?} */\n            var pushedItem;\n            for (; i < l; i++) {\n                pushedItem = this.pushedItems[i];\n                pushedItem.$item.x = pushedItem.item.x || 0;\n                pushedItem.$item.y = pushedItem.item.y || 0;\n                pushedItem.$item.cols = pushedItem.item.cols || 1;\n                pushedItem.$item[\"row\"] = pushedItem.item[\"row\"] || 1;\n                pushedItem.setSize();\n            }\n            this.pushedItems = [];\n            this.pushedItemsPath = [];\n        };\n    /**\n     * @return {?}\n     */\n    GridsterPushResize.prototype.setPushedItems = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var i = 0;\n            /** @type {?} */\n            var l = this.pushedItems.length;\n            /** @type {?} */\n            var pushedItem;\n            for (; i < l; i++) {\n                pushedItem = this.pushedItems[i];\n                pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n            }\n            this.pushedItems = [];\n            this.pushedItemsPath = [];\n        };\n    /**\n     * @return {?}\n     */\n    GridsterPushResize.prototype.checkPushBack = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var i = this.pushedItems.length - 1;\n            /** @type {?} */\n            var change = false;\n            for (; i > -1; i--) {\n                if (this.checkPushedItem(this.pushedItems[i], i)) {\n                    change = true;\n                }\n            }\n            if (change) {\n                this.checkPushBack();\n            }\n        };\n    /**\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    GridsterPushResize.prototype.push = /**\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n        function (gridsterItem, direction) {\n            /** @type {?} */\n            var gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n            if (gridsterItemCollision && gridsterItemCollision !== true &&\n                gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n                if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n                    return true;\n                }\n            }\n            else if (gridsterItemCollision === false) {\n                return true;\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    GridsterPushResize.prototype.trySouth = /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n        function (gridsterItemCollide, gridsterItem, direction) {\n            /** @type {?} */\n            var backUpY = gridsterItemCollide.$item.y;\n            /** @type {?} */\n            var backUpRows = gridsterItemCollide.$item.rows;\n            gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n            gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n            if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n                && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n                gridsterItemCollide.setSize();\n                this.addToPushed(gridsterItemCollide);\n                this.push(gridsterItem, direction);\n                return true;\n            }\n            else {\n                gridsterItemCollide.$item.y = backUpY;\n                gridsterItemCollide.$item.rows = backUpRows;\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    GridsterPushResize.prototype.tryNorth = /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n        function (gridsterItemCollide, gridsterItem, direction) {\n            /** @type {?} */\n            var backUpRows = gridsterItemCollide.$item.rows;\n            gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n            if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n                && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n                gridsterItemCollide.setSize();\n                this.addToPushed(gridsterItemCollide);\n                this.push(gridsterItem, direction);\n                return true;\n            }\n            else {\n                gridsterItemCollide.$item.rows = backUpRows;\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    GridsterPushResize.prototype.tryEast = /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n        function (gridsterItemCollide, gridsterItem, direction) {\n            /** @type {?} */\n            var backUpX = gridsterItemCollide.$item.x;\n            /** @type {?} */\n            var backUpCols = gridsterItemCollide.$item.cols;\n            gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n            gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n            if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n                && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n                gridsterItemCollide.setSize();\n                this.addToPushed(gridsterItemCollide);\n                this.push(gridsterItem, direction);\n                return true;\n            }\n            else {\n                gridsterItemCollide.$item.x = backUpX;\n                gridsterItemCollide.$item.cols = backUpCols;\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    GridsterPushResize.prototype.tryWest = /**\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n        function (gridsterItemCollide, gridsterItem, direction) {\n            /** @type {?} */\n            var backUpCols = gridsterItemCollide.$item.cols;\n            gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n            if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n                && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n                gridsterItemCollide.setSize();\n                this.addToPushed(gridsterItemCollide);\n                this.push(gridsterItem, direction);\n                return true;\n            }\n            else {\n                gridsterItemCollide.$item.cols = backUpCols;\n            }\n            return false;\n        };\n    /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    GridsterPushResize.prototype.addToPushed = /**\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n        function (gridsterItem) {\n            if (this.pushedItems.indexOf(gridsterItem) < 0) {\n                this.pushedItems.push(gridsterItem);\n                this.pushedItemsPath.push([\n                    {\n                        x: gridsterItem.item.x || 0,\n                        y: gridsterItem.item.y || 0,\n                        cols: gridsterItem.item.cols || 0,\n                        rows: gridsterItem.item.rows || 0\n                    },\n                    {\n                        x: gridsterItem.$item.x,\n                        y: gridsterItem.$item.y,\n                        cols: gridsterItem.$item.cols,\n                        rows: gridsterItem.$item.rows\n                    }\n                ]);\n            }\n            else {\n                /** @type {?} */\n                var i = this.pushedItems.indexOf(gridsterItem);\n                this.pushedItemsPath[i].push({\n                    x: gridsterItem.$item.x,\n                    y: gridsterItem.$item.y,\n                    cols: gridsterItem.$item.cols,\n                    rows: gridsterItem.$item.rows\n                });\n            }\n        };\n    /**\n     * @param {?} i\n     * @return {?}\n     */\n    GridsterPushResize.prototype.removeFromPushed = /**\n     * @param {?} i\n     * @return {?}\n     */\n        function (i) {\n            if (i > -1) {\n                this.pushedItems.splice(i, 1);\n                this.pushedItemsPath.splice(i, 1);\n            }\n        };\n    /**\n     * @param {?} pushedItem\n     * @param {?} i\n     * @return {?}\n     */\n    GridsterPushResize.prototype.checkPushedItem = /**\n     * @param {?} pushedItem\n     * @param {?} i\n     * @return {?}\n     */\n        function (pushedItem, i) {\n            /** @type {?} */\n            var path = this.pushedItemsPath[i];\n            /** @type {?} */\n            var j = path.length - 2;\n            /** @type {?} */\n            var lastPosition;\n            /** @type {?} */\n            var x;\n            /** @type {?} */\n            var y;\n            /** @type {?} */\n            var cols;\n            /** @type {?} */\n            var rows;\n            for (; j > -1; j--) {\n                lastPosition = path[j];\n                x = pushedItem.$item.x;\n                y = pushedItem.$item.y;\n                cols = pushedItem.$item.cols;\n                rows = pushedItem.$item.rows;\n                pushedItem.$item.x = lastPosition.x;\n                pushedItem.$item.y = lastPosition.y;\n                pushedItem.$item.cols = lastPosition.cols;\n                pushedItem.$item.rows = lastPosition.rows;\n                if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n                    pushedItem.setSize();\n                    path.splice(j + 1, path.length - 1 - j);\n                }\n                else {\n                    pushedItem.$item.x = x;\n                    pushedItem.$item.y = y;\n                    pushedItem.$item.cols = cols;\n                    pushedItem.$item.rows = rows;\n                }\n            }\n            if (path.length < 2) {\n                this.removeFromPushed(i);\n                return true;\n            }\n            return false;\n        };\n    return GridsterPushResize;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterResizable = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterResizable(gridsterItem, gridster, zone) {\n        this.zone = zone;\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridster;\n        this.lastMouse = {\n            clientX: 0,\n            clientY: 0\n        };\n        this.itemBackup = [0, 0, 0, 0];\n        this.resizeEventScrollType = { w: false, e: false, n: false, s: false };\n    }\n    /**\n     * @return {?}\n     */\n    GridsterResizable.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.gridster.previewStyle) {\n                this.gridster.previewStyle();\n            }\n            delete this.gridsterItem;\n            delete this.gridster;\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.dragStart = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            switch (e.which) {\n                case 1:\n                    // left mouse button\n                    break;\n                case 2:\n                case 3:\n                    // right or middle mouse button\n                    return;\n            }\n            if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n                this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n            }\n            e.stopPropagation();\n            e.preventDefault();\n            this.dragFunction = this.dragMove.bind(this);\n            this.dragStopFunction = this.dragStop.bind(this);\n            this.zone.runOutsideAngular(function () {\n                _this.mousemove = _this.gridsterItem.renderer.listen('document', 'mousemove', _this.dragFunction);\n                _this.touchmove = _this.gridster.renderer.listen(_this.gridster.el, 'touchmove', _this.dragFunction);\n            });\n            this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n            this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n            this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n            this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n            this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n            this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n            this.lastMouse.clientX = e.clientX;\n            this.lastMouse.clientY = e.clientY;\n            this.left = this.gridsterItem.left;\n            this.top = this.gridsterItem.top;\n            this.width = this.gridsterItem.width;\n            this.height = this.gridsterItem.height;\n            this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n            this.right = this.gridsterItem.left + this.gridsterItem.width;\n            this.margin = this.gridster.$options.margin;\n            this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n            this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n            this.diffLeft = e.clientX + this.offsetLeft - this.left;\n            this.diffRight = e.clientX + this.offsetLeft - this.right;\n            this.diffTop = e.clientY + this.offsetTop - this.top;\n            this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n            this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\n                - this.margin;\n            this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\n                - this.margin;\n            this.gridster.movingItem = this.gridsterItem.$item;\n            this.gridster.previewStyle();\n            this.push = new GridsterPush(this.gridsterItem);\n            this.pushResize = new GridsterPushResize(this.gridsterItem);\n            this.gridster.dragInProgress = true;\n            this.gridster.updateGrid();\n            if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n                this.resizeEventScrollType.n = true;\n                this.directionFunction = this.handleN;\n            }\n            else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n                this.resizeEventScrollType.w = true;\n                this.directionFunction = this.handleW;\n            }\n            else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n                this.resizeEventScrollType.s = true;\n                this.directionFunction = this.handleS;\n            }\n            else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n                this.resizeEventScrollType.e = true;\n                this.directionFunction = this.handleE;\n            }\n            else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n                this.resizeEventScrollType.n = true;\n                this.resizeEventScrollType.w = true;\n                this.directionFunction = this.handleNW;\n            }\n            else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n                this.resizeEventScrollType.n = true;\n                this.resizeEventScrollType.e = true;\n                this.directionFunction = this.handleNE;\n            }\n            else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n                this.resizeEventScrollType.s = true;\n                this.resizeEventScrollType.w = true;\n                this.directionFunction = this.handleSW;\n            }\n            else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n                this.resizeEventScrollType.s = true;\n                this.resizeEventScrollType.e = true;\n                this.directionFunction = this.handleSE;\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.dragMove = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            e.stopPropagation();\n            e.preventDefault();\n            GridsterUtils.checkTouchEvent(e);\n            this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n            this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n            scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true, this.resizeEventScrollType);\n            this.directionFunction(e);\n            this.lastMouse.clientX = e.clientX;\n            this.lastMouse.clientY = e.clientY;\n            this.zone.run(function () {\n                _this.gridster.updateGrid();\n            });\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.dragStop = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            e.stopPropagation();\n            e.preventDefault();\n            cancelScroll();\n            this.mousemove();\n            this.mouseup();\n            this.mouseleave();\n            this.cancelOnBlur();\n            this.touchmove();\n            this.touchend();\n            this.touchcancel();\n            this.gridster.dragInProgress = false;\n            this.gridster.updateGrid();\n            if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n                Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\n                    .then(this.makeResize.bind(this), this.cancelResize.bind(this));\n            }\n            else {\n                this.makeResize();\n            }\n            setTimeout(function () {\n                _this.gridsterItem.renderer.removeClass(_this.gridsterItem.el, 'gridster-item-resizing');\n                if (_this.gridster) {\n                    _this.gridster.movingItem = null;\n                    _this.gridster.previewStyle();\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    GridsterResizable.prototype.cancelResize = /**\n     * @return {?}\n     */\n        function () {\n            this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n            this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n            this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n            this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n            this.gridsterItem.setSize();\n            this.push.restoreItems();\n            this.pushResize.restoreItems();\n            this.push.destroy();\n            delete this.push;\n            this.pushResize.destroy();\n            delete this.pushResize;\n        };\n    /**\n     * @return {?}\n     */\n    GridsterResizable.prototype.makeResize = /**\n     * @return {?}\n     */\n        function () {\n            this.gridsterItem.setSize();\n            this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n            this.push.setPushedItems();\n            this.pushResize.setPushedItems();\n            this.push.destroy();\n            delete this.push;\n            this.pushResize.destroy();\n            delete this.pushResize;\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.handleN = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.top = e.clientY + this.offsetTop - this.diffTop;\n            this.height = this.bottom - this.top;\n            if (this.minHeight > this.height) {\n                this.height = this.minHeight;\n                this.top = this.bottom - this.minHeight;\n            }\n            this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n            if (this.gridsterItem.$item.y !== this.newPosition) {\n                this.itemBackup[1] = this.gridsterItem.$item.y;\n                this.itemBackup[3] = this.gridsterItem.$item.rows;\n                this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n                this.gridsterItem.$item.y = this.newPosition;\n                this.pushResize.pushItems(this.pushResize.fromSouth);\n                this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                    this.gridsterItem.$item.y = this.itemBackup[1];\n                    this.gridsterItem.$item.rows = this.itemBackup[3];\n                    this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n                    this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n                    return;\n                }\n                else {\n                    this.gridster.previewStyle();\n                }\n                this.pushResize.checkPushBack();\n                this.push.checkPushBack();\n            }\n            this.setItemTop(this.top);\n            this.setItemHeight(this.height);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.handleW = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.left = e.clientX + this.offsetLeft - this.diffLeft;\n            this.width = this.right - this.left;\n            if (this.minWidth > this.width) {\n                this.width = this.minWidth;\n                this.left = this.right - this.minWidth;\n            }\n            this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n            if (this.gridsterItem.$item.x !== this.newPosition) {\n                this.itemBackup[0] = this.gridsterItem.$item.x;\n                this.itemBackup[2] = this.gridsterItem.$item.cols;\n                this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n                this.gridsterItem.$item.x = this.newPosition;\n                this.pushResize.pushItems(this.pushResize.fromEast);\n                this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                    this.gridsterItem.$item.x = this.itemBackup[0];\n                    this.gridsterItem.$item.cols = this.itemBackup[2];\n                    this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n                    this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n                    return;\n                }\n                else {\n                    this.gridster.previewStyle();\n                }\n                this.pushResize.checkPushBack();\n                this.push.checkPushBack();\n            }\n            this.setItemLeft(this.left);\n            this.setItemWidth(this.width);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.handleS = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n            if (this.minHeight > this.height) {\n                this.height = this.minHeight;\n            }\n            this.bottom = this.top + this.height;\n            this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n            if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\n                this.itemBackup[3] = this.gridsterItem.$item.rows;\n                this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n                this.pushResize.pushItems(this.pushResize.fromNorth);\n                this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                    this.gridsterItem.$item.rows = this.itemBackup[3];\n                    this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n                    return;\n                }\n                else {\n                    this.gridster.previewStyle();\n                }\n                this.pushResize.checkPushBack();\n                this.push.checkPushBack();\n            }\n            this.setItemHeight(this.height);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.handleE = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\n            if (this.minWidth > this.width) {\n                this.width = this.minWidth;\n            }\n            this.right = this.left + this.width;\n            this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n            if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\n                this.itemBackup[2] = this.gridsterItem.$item.cols;\n                this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n                this.pushResize.pushItems(this.pushResize.fromWest);\n                this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                    this.gridsterItem.$item.cols = this.itemBackup[2];\n                    this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n                    return;\n                }\n                else {\n                    this.gridster.previewStyle();\n                }\n                this.pushResize.checkPushBack();\n                this.push.checkPushBack();\n            }\n            this.setItemWidth(this.width);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.handleNW = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.handleN(e);\n            this.handleW(e);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.handleNE = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.handleN(e);\n            this.handleE(e);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.handleSW = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.handleS(e);\n            this.handleW(e);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.handleSE = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.handleS(e);\n            this.handleE(e);\n        };\n    /**\n     * @return {?}\n     */\n    GridsterResizable.prototype.toggle = /**\n     * @return {?}\n     */\n        function () {\n            this.resizeEnabled = this.gridsterItem.canBeResized();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    GridsterResizable.prototype.dragStartDelay = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            GridsterUtils.checkTouchEvent(e);\n            if (!this.gridster.$options.resizable.delayStart) {\n                this.dragStart(e);\n                return;\n            }\n            /** @type {?} */\n            var timeout = setTimeout(function () {\n                _this.dragStart(e);\n                cancelDrag();\n            }, this.gridster.$options.resizable.delayStart);\n            /** @type {?} */\n            var cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n            /** @type {?} */\n            var cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n            /** @type {?} */\n            var cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n            /** @type {?} */\n            var cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n            /** @type {?} */\n            var cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n            /** @type {?} */\n            var cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n            /**\n             * @param {?} eventMove\n             * @return {?}\n             */\n            function cancelMove(eventMove) {\n                GridsterUtils.checkTouchEvent(eventMove);\n                if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n                    cancelDrag();\n                }\n            }\n            /**\n             * @return {?}\n             */\n            function cancelDrag() {\n                clearTimeout(timeout);\n                cancelOnBlur();\n                cancelMouse();\n                cancelMouseLeave();\n                cancelTouchMove();\n                cancelTouchEnd();\n                cancelTouchCancel();\n            }\n        };\n    /**\n     * @param {?} top\n     * @return {?}\n     */\n    GridsterResizable.prototype.setItemTop = /**\n     * @param {?} top\n     * @return {?}\n     */\n        function (top) {\n            /** @type {?} */\n            var transform = 'translate(' + this.left + 'px, ' + top + 'px)';\n            this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n        };\n    /**\n     * @param {?} left\n     * @return {?}\n     */\n    GridsterResizable.prototype.setItemLeft = /**\n     * @param {?} left\n     * @return {?}\n     */\n        function (left) {\n            /** @type {?} */\n            var transform = 'translate(' + left + 'px, ' + this.top + 'px)';\n            this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n        };\n    /**\n     * @param {?} height\n     * @return {?}\n     */\n    GridsterResizable.prototype.setItemHeight = /**\n     * @param {?} height\n     * @return {?}\n     */\n        function (height) {\n            this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n        };\n    /**\n     * @param {?} width\n     * @return {?}\n     */\n    GridsterResizable.prototype.setItemWidth = /**\n     * @param {?} width\n     * @return {?}\n     */\n        function (width) {\n            this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n        };\n    return GridsterResizable;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterItemComponent = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterItemComponent(el, gridster, renderer, zone) {\n        this.renderer = renderer;\n        this.zone = zone;\n        this.el = el.nativeElement;\n        this.$item = {\n            cols: -1,\n            rows: -1,\n            x: -1,\n            y: -1,\n        };\n        this.gridster = gridster;\n        this.drag = new GridsterDraggable(this, gridster, this.zone);\n        this.resize = new GridsterResizable(this, gridster, this.zone);\n    }\n    /**\n     * @return {?}\n     */\n    GridsterItemComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateOptions();\n            this.gridster.addItem(this);\n        };\n    /**\n     * @return {?}\n     */\n    GridsterItemComponent.prototype.updateOptions = /**\n     * @return {?}\n     */\n        function () {\n            this.$item = GridsterUtils.merge(this.$item, this.item, {\n                cols: undefined,\n                rows: undefined,\n                x: undefined,\n                y: undefined,\n                dragEnabled: undefined,\n                resizeEnabled: undefined,\n                compactEnabled: undefined,\n                maxItemRows: undefined,\n                minItemRows: undefined,\n                maxItemCols: undefined,\n                minItemCols: undefined,\n                maxItemArea: undefined,\n                minItemArea: undefined,\n            });\n        };\n    /**\n     * @return {?}\n     */\n    GridsterItemComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.gridster.removeItem(this);\n            delete this.gridster;\n            this.drag.destroy();\n            delete this.drag;\n            this.resize.destroy();\n            delete this.resize;\n        };\n    /**\n     * @return {?}\n     */\n    GridsterItemComponent.prototype.setSize = /**\n     * @return {?}\n     */\n        function () {\n            this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n            this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n            this.updateItemSize();\n        };\n    /**\n     * @return {?}\n     */\n    GridsterItemComponent.prototype.updateItemSize = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var top = this.$item.y * this.gridster.curRowHeight;\n            /** @type {?} */\n            var left = this.$item.x * this.gridster.curColWidth;\n            /** @type {?} */\n            var width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n            /** @type {?} */\n            var height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n            if (!this.init && width > 0 && height > 0) {\n                this.init = true;\n                if (this.item.initCallback) {\n                    this.item.initCallback(this.item, this);\n                }\n                if (this.gridster.options.itemInitCallback) {\n                    this.gridster.options.itemInitCallback(this.item, this);\n                }\n                if (this.gridster.$options.scrollToNewItems) {\n                    this.el.scrollIntoView(false);\n                }\n            }\n            if (width !== this.width || height !== this.height) {\n                this.width = width;\n                this.height = height;\n                if (this.gridster.options.itemResizeCallback) {\n                    this.gridster.options.itemResizeCallback(this.item, this);\n                }\n            }\n            this.top = top;\n            this.left = left;\n        };\n    /**\n     * @return {?}\n     */\n    GridsterItemComponent.prototype.itemChanged = /**\n     * @return {?}\n     */\n        function () {\n            if (this.gridster.options.itemChangeCallback) {\n                this.gridster.options.itemChangeCallback(this.item, this);\n            }\n        };\n    /**\n     * @param {?} newValue\n     * @param {?} oldValue\n     * @return {?}\n     */\n    GridsterItemComponent.prototype.checkItemChanges = /**\n     * @param {?} newValue\n     * @param {?} oldValue\n     * @return {?}\n     */\n        function (newValue, oldValue) {\n            if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n                return;\n            }\n            if (this.gridster.checkCollision(this.$item)) {\n                this.$item.x = oldValue.x || 0;\n                this.$item.y = oldValue.y || 0;\n                this.$item.cols = oldValue.cols || 1;\n                this.$item.rows = oldValue.rows || 1;\n                this.setSize();\n            }\n            else {\n                this.item.cols = this.$item.cols;\n                this.item.rows = this.$item.rows;\n                this.item.x = this.$item.x;\n                this.item.y = this.$item.y;\n                this.gridster.calculateLayoutDebounce();\n                this.itemChanged();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    GridsterItemComponent.prototype.canBeDragged = /**\n     * @return {?}\n     */\n        function () {\n            return !this.gridster.mobile &&\n                (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n        };\n    /**\n     * @return {?}\n     */\n    GridsterItemComponent.prototype.canBeResized = /**\n     * @return {?}\n     */\n        function () {\n            return !this.gridster.mobile &&\n                (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n        };\n    return GridsterItemComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterPreviewComponent = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterPreviewComponent(el, gridster, renderer) {\n        this.renderer = renderer;\n        this.el = el.nativeElement;\n        this.gridster = gridster;\n        this.gridster.previewStyle = this.previewStyle.bind(this);\n    }\n    /**\n     * @return {?}\n     */\n    GridsterPreviewComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            delete this.el;\n            delete this.gridster.previewStyle;\n            delete this.gridster;\n        };\n    /**\n     * @param {?=} drag\n     * @return {?}\n     */\n    GridsterPreviewComponent.prototype.previewStyle = /**\n     * @param {?=} drag\n     * @return {?}\n     */\n        function (drag) {\n            if (!this.gridster.movingItem) {\n                this.renderer.setStyle(this.el, 'display', '');\n            }\n            else {\n                if (this.gridster.compact && drag) {\n                    this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n                }\n                this.renderer.setStyle(this.el, 'display', 'block');\n                this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n            }\n        };\n    return GridsterPreviewComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar GridsterModule = /** @class */ /*@__PURE__*/ (function () {\n    function GridsterModule() {\n    }\n    return GridsterModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { GridsterComponent, GridsterItemComponent, GridsterItemComponentInterface, GridsterComponentInterface, GridType, DisplayGrid, CompactType, GridsterConfigService, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap, GridsterPreviewComponent as ɵa };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}