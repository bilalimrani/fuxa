{"remainingRequest":"/Users/bilal/Documents/GitHub/FUXA/client/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/bilal/Documents/GitHub/FUXA/client/node_modules/panzoom/index.js","dependencies":[{"path":"/Users/bilal/Documents/GitHub/FUXA/client/node_modules/panzoom/index.js","mtime":499162500000},{"path":"/Users/bilal/Documents/GitHub/FUXA/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bilal/Documents/GitHub/FUXA/client/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["'use strict';\n/**\n * Allows to drag and zoom svg elements\n */\nvar wheel = require('wheel');\nvar animate = require('amator');\nvar eventify = require('ngraph.events');\nvar kinetic = require('./lib/kinetic.js');\nvar createTextSelectionInterceptor = require('./lib/createTextSelectionInterceptor.js');\nvar domTextSelectionInterceptor = createTextSelectionInterceptor();\nvar fakeTextSelectorInterceptor = createTextSelectionInterceptor(true);\nvar Transform = require('./lib/transform.js');\nvar makeSvgController = require('./lib/svgController.js');\nvar makeDomController = require('./lib/domController.js');\n\nvar defaultZoomSpeed = 1;\nvar defaultDoubleTapZoomSpeed = 1.75;\nvar doubleTapSpeedInMS = 300;\n\nmodule.exports = createPanZoom;\n\n/**\n * Creates a new instance of panzoom, so that an object can be panned and zoomed\n *\n * @param {DOMElement} domElement where panzoom should be attached.\n * @param {Object} options that configure behavior.\n */\nfunction createPanZoom(domElement, options) {\n  options = options || {};\n\n  var panController = options.controller;\n\n  if (!panController) {\n    if (makeSvgController.canAttach(domElement)) {\n      panController = makeSvgController(domElement, options);\n    } else if (makeDomController.canAttach(domElement)) {\n      panController = makeDomController(domElement, options);\n    }\n  }\n\n  if (!panController) {\n    throw new Error(\n      'Cannot create panzoom for the current type of dom element'\n    );\n  }\n  var owner = panController.getOwner();\n  // just to avoid GC pressure, every time we do intermediate transform\n  // we return this object. For internal use only. Never give it back to the consumer of this library\n  var storedCTMResult = { x: 0, y: 0 };\n\n  var isDirty = false;\n  var transform = new Transform();\n\n  if (panController.initTransform) {\n    panController.initTransform(transform);\n  }\n\n  var filterKey = typeof options.filterKey === 'function' ? options.filterKey : noop;\n  // TODO: likely need to unite pinchSpeed with zoomSpeed\n  var pinchSpeed = typeof options.pinchSpeed === 'number' ? options.pinchSpeed : 1;\n  var bounds = options.bounds;\n  var maxZoom = typeof options.maxZoom === 'number' ? options.maxZoom : Number.POSITIVE_INFINITY;\n  var minZoom = typeof options.minZoom === 'number' ? options.minZoom : 0;\n\n  var boundsPadding = typeof options.boundsPadding === 'number' ? options.boundsPadding : 0.05;\n  var zoomDoubleClickSpeed = typeof options.zoomDoubleClickSpeed === 'number' ? options.zoomDoubleClickSpeed : defaultDoubleTapZoomSpeed;\n  var beforeWheel = options.beforeWheel || noop;\n  var beforeMouseDown = options.beforeMouseDown || noop;\n  var speed = typeof options.zoomSpeed === 'number' ? options.zoomSpeed : defaultZoomSpeed;\n  var transformOrigin = parseTransformOrigin(options.transformOrigin);\n  var textSelection = options.enableTextSelection ? fakeTextSelectorInterceptor : domTextSelectionInterceptor;\n\n  validateBounds(bounds);\n\n  if (options.autocenter) {\n    autocenter();\n  }\n\n  var frameAnimation;\n  var lastTouchEndTime = 0;\n  var lastSingleFingerOffset;\n  var touchInProgress = false;\n\n  // We only need to fire panstart when actual move happens\n  var panstartFired = false;\n\n  // cache mouse coordinates here\n  var mouseX;\n  var mouseY;\n\n  var pinchZoomLength;\n\n  var smoothScroll;\n  if ('smoothScroll' in options && !options.smoothScroll) {\n    // If user explicitly asked us not to use smooth scrolling, we obey\n    smoothScroll = rigidScroll();\n  } else {\n    // otherwise we use forward smoothScroll settings to kinetic API\n    // which makes scroll smoothing.\n    smoothScroll = kinetic(getPoint, scroll, options.smoothScroll);\n  }\n\n  var moveByAnimation;\n  var zoomToAnimation;\n\n  var multiTouch;\n  var paused = false;\n\n  listenForEvents();\n\n  var api = {\n    dispose: dispose,\n    moveBy: internalMoveBy,\n    moveTo: moveTo,\n    smoothMoveTo: smoothMoveTo, \n    centerOn: centerOn,\n    zoomTo: publicZoomTo,\n    zoomAbs: zoomAbs,\n    smoothZoom: smoothZoom,\n    smoothZoomAbs: smoothZoomAbs,\n    showRectangle: showRectangle,\n\n    pause: pause,\n    resume: resume,\n    isPaused: isPaused,\n\n    getTransform: getTransformModel,\n\n    getMinZoom: getMinZoom,\n    setMinZoom: setMinZoom,\n\n    getMaxZoom: getMaxZoom,\n    setMaxZoom: setMaxZoom,\n\n    getTransformOrigin: getTransformOrigin,\n    setTransformOrigin: setTransformOrigin,\n\n    getZoomSpeed: getZoomSpeed,\n    setZoomSpeed: setZoomSpeed\n  };\n\n  eventify(api);\n  \n  var initialX = typeof options.initialX === 'number' ? options.initialX : transform.x;\n  var initialY = typeof options.initialY === 'number' ? options.initialY : transform.y;\n  var initialZoom = typeof options.initialZoom === 'number' ? options.initialZoom : transform.scale;\n\n  if(initialX != transform.x || initialY != transform.y || initialZoom != transform.scale){\n    zoomAbs(initialX, initialY, initialZoom);\n  }\n\n  return api;\n\n  function pause() {\n    releaseEvents();\n    paused = true;\n  }\n\n  function resume() {\n    if (paused) {\n      listenForEvents();\n      paused = false;\n    }\n  }\n\n  function isPaused() {\n    return paused;\n  }\n\n  function showRectangle(rect) {\n    // TODO: this duplicates autocenter. I think autocenter should go.\n    var clientRect = owner.getBoundingClientRect();\n    var size = transformToScreen(clientRect.width, clientRect.height);\n\n    var rectWidth = rect.right - rect.left;\n    var rectHeight = rect.bottom - rect.top;\n    if (!Number.isFinite(rectWidth) || !Number.isFinite(rectHeight)) {\n      throw new Error('Invalid rectangle');\n    }\n\n    var dw = size.x / rectWidth;\n    var dh = size.y / rectHeight;\n    var scale = Math.min(dw, dh);\n    transform.x = -(rect.left + rectWidth / 2) * scale + size.x / 2;\n    transform.y = -(rect.top + rectHeight / 2) * scale + size.y / 2;\n    transform.scale = scale;\n  }\n\n  function transformToScreen(x, y) {\n    if (panController.getScreenCTM) {\n      var parentCTM = panController.getScreenCTM();\n      var parentScaleX = parentCTM.a;\n      var parentScaleY = parentCTM.d;\n      var parentOffsetX = parentCTM.e;\n      var parentOffsetY = parentCTM.f;\n      storedCTMResult.x = x * parentScaleX - parentOffsetX;\n      storedCTMResult.y = y * parentScaleY - parentOffsetY;\n    } else {\n      storedCTMResult.x = x;\n      storedCTMResult.y = y;\n    }\n\n    return storedCTMResult;\n  }\n\n  function autocenter() {\n    var w; // width of the parent\n    var h; // height of the parent\n    var left = 0;\n    var top = 0;\n    var sceneBoundingBox = getBoundingBox();\n    if (sceneBoundingBox) {\n      // If we have bounding box - use it.\n      left = sceneBoundingBox.left;\n      top = sceneBoundingBox.top;\n      w = sceneBoundingBox.right - sceneBoundingBox.left;\n      h = sceneBoundingBox.bottom - sceneBoundingBox.top;\n    } else {\n      // otherwise just use whatever space we have\n      var ownerRect = owner.getBoundingClientRect();\n      w = ownerRect.width;\n      h = ownerRect.height;\n    }\n    var bbox = panController.getBBox();\n    if (bbox.width === 0 || bbox.height === 0) {\n      // we probably do not have any elements in the SVG\n      // just bail out;\n      return;\n    }\n    var dh = h / bbox.height;\n    var dw = w / bbox.width;\n    var scale = Math.min(dw, dh);\n    transform.x = -(bbox.left + bbox.width / 2) * scale + w / 2 + left;\n    transform.y = -(bbox.top + bbox.height / 2) * scale + h / 2 + top;\n    transform.scale = scale;\n  }\n\n  function getTransformModel() {\n    // TODO: should this be read only?\n    return transform;\n  }\n\n  function getMinZoom() {\n    return minZoom;\n  }\n\n  function setMinZoom(newMinZoom) {\n    minZoom = newMinZoom;\n  }\n\n  function getMaxZoom() {\n    return maxZoom;\n  }\n\n  function setMaxZoom(newMaxZoom) {\n    maxZoom = newMaxZoom;\n  }\n\n  function getTransformOrigin() {\n    return transformOrigin;\n  }\n\n  function setTransformOrigin(newTransformOrigin) {\n    transformOrigin = parseTransformOrigin(newTransformOrigin);\n  }\n\n  function getZoomSpeed() {\n    return speed;\n  }\n\n  function setZoomSpeed(newSpeed) {\n    if (!Number.isFinite(newSpeed)) {\n      throw new Error('Zoom speed should be a number');\n    }\n    speed = newSpeed;\n  }\n\n  function getPoint() {\n    return {\n      x: transform.x,\n      y: transform.y\n    };\n  }\n\n  function moveTo(x, y) {\n    transform.x = x;\n    transform.y = y;\n\n    keepTransformInsideBounds();\n\n    triggerEvent('pan');\n    makeDirty();\n  }\n\n  function moveBy(dx, dy) {\n    moveTo(transform.x + dx, transform.y + dy);\n  }\n\n  function keepTransformInsideBounds() {\n    var boundingBox = getBoundingBox();\n    if (!boundingBox) return;\n\n    var adjusted = false;\n    var clientRect = getClientRect();\n\n    var diff = boundingBox.left - clientRect.right;\n    if (diff > 0) {\n      transform.x += diff;\n      adjusted = true;\n    }\n    // check the other side:\n    diff = boundingBox.right - clientRect.left;\n    if (diff < 0) {\n      transform.x += diff;\n      adjusted = true;\n    }\n\n    // y axis:\n    diff = boundingBox.top - clientRect.bottom;\n    if (diff > 0) {\n      // we adjust transform, so that it matches exactly our bounding box:\n      // transform.y = boundingBox.top - (boundingBox.height + boundingBox.y) * transform.scale =>\n      // transform.y = boundingBox.top - (clientRect.bottom - transform.y) =>\n      // transform.y = diff + transform.y =>\n      transform.y += diff;\n      adjusted = true;\n    }\n\n    diff = boundingBox.bottom - clientRect.top;\n    if (diff < 0) {\n      transform.y += diff;\n      adjusted = true;\n    }\n    return adjusted;\n  }\n\n  /**\n   * Returns bounding box that should be used to restrict scene movement.\n   */\n  function getBoundingBox() {\n    if (!bounds) return; // client does not want to restrict movement\n\n    if (typeof bounds === 'boolean') {\n      // for boolean type we use parent container bounds\n      var ownerRect = owner.getBoundingClientRect();\n      var sceneWidth = ownerRect.width;\n      var sceneHeight = ownerRect.height;\n\n      return {\n        left: sceneWidth * boundsPadding,\n        top: sceneHeight * boundsPadding,\n        right: sceneWidth * (1 - boundsPadding),\n        bottom: sceneHeight * (1 - boundsPadding)\n      };\n    }\n\n    return bounds;\n  }\n\n  function getClientRect() {\n    var bbox = panController.getBBox();\n    var leftTop = client(bbox.left, bbox.top);\n\n    return {\n      left: leftTop.x,\n      top: leftTop.y,\n      right: bbox.width * transform.scale + leftTop.x,\n      bottom: bbox.height * transform.scale + leftTop.y\n    };\n  }\n\n  function client(x, y) {\n    return {\n      x: x * transform.scale + transform.x,\n      y: y * transform.scale + transform.y\n    };\n  }\n\n  function makeDirty() {\n    isDirty = true;\n    frameAnimation = window.requestAnimationFrame(frame);\n  }\n\n  function zoomByRatio(clientX, clientY, ratio) {\n    if (isNaN(clientX) || isNaN(clientY) || isNaN(ratio)) {\n      throw new Error('zoom requires valid numbers');\n    }\n\n    var newScale = transform.scale * ratio;\n\n    if (newScale < minZoom) {\n      if (transform.scale === minZoom) return;\n\n      ratio = minZoom / transform.scale;\n    }\n    if (newScale > maxZoom) {\n      if (transform.scale === maxZoom) return;\n\n      ratio = maxZoom / transform.scale;\n    }\n\n    var size = transformToScreen(clientX, clientY);\n\n    transform.x = size.x - ratio * (size.x - transform.x);\n    transform.y = size.y - ratio * (size.y - transform.y);\n\n    // TODO: https://github.com/anvaka/panzoom/issues/112\n    if (bounds && boundsPadding === 1 && minZoom === 1) {\n      transform.scale *= ratio;\n      keepTransformInsideBounds();\n    } else {\n      var transformAdjusted = keepTransformInsideBounds();\n      if (!transformAdjusted) transform.scale *= ratio;\n    }\n\n    triggerEvent('zoom');\n\n    makeDirty();\n  }\n\n  function zoomAbs(clientX, clientY, zoomLevel) {\n    var ratio = zoomLevel / transform.scale;\n    zoomByRatio(clientX, clientY, ratio);\n  }\n\n  function centerOn(ui) {\n    var parent = ui.ownerSVGElement;\n    if (!parent)\n      throw new Error('ui element is required to be within the scene');\n\n    // TODO: should i use controller's screen CTM?\n    var clientRect = ui.getBoundingClientRect();\n    var cx = clientRect.left + clientRect.width / 2;\n    var cy = clientRect.top + clientRect.height / 2;\n\n    var container = parent.getBoundingClientRect();\n    var dx = container.width / 2 - cx;\n    var dy = container.height / 2 - cy;\n\n    internalMoveBy(dx, dy, true);\n  }\n\n  function smoothMoveTo(x, y){\n    internalMoveBy(x - transform.x, y - transform.y, true);\n  }\n\n  function internalMoveBy(dx, dy, smooth) {\n    if (!smooth) {\n      return moveBy(dx, dy);\n    }\n\n    if (moveByAnimation) moveByAnimation.cancel();\n\n    var from = { x: 0, y: 0 };\n    var to = { x: dx, y: dy };\n    var lastX = 0;\n    var lastY = 0;\n\n    moveByAnimation = animate(from, to, {\n      step: function (v) {\n        moveBy(v.x - lastX, v.y - lastY);\n\n        lastX = v.x;\n        lastY = v.y;\n      }\n    });\n  }\n\n  function scroll(x, y) {\n    cancelZoomAnimation();\n    moveTo(x, y);\n  }\n\n  function dispose() {\n    releaseEvents();\n  }\n\n  function listenForEvents() {\n    owner.addEventListener('mousedown', onMouseDown, { passive: false });\n    owner.addEventListener('dblclick', onDoubleClick, { passive: false });\n    owner.addEventListener('touchstart', onTouch, { passive: false });\n    owner.addEventListener('keydown', onKeyDown, { passive: false });\n\n    // Need to listen on the owner container, so that we are not limited\n    // by the size of the scrollable domElement\n    wheel.addWheelListener(owner, onMouseWheel, { passive: false });\n\n    makeDirty();\n  }\n\n  function releaseEvents() {\n    wheel.removeWheelListener(owner, onMouseWheel);\n    owner.removeEventListener('mousedown', onMouseDown);\n    owner.removeEventListener('keydown', onKeyDown);\n    owner.removeEventListener('dblclick', onDoubleClick);\n    owner.removeEventListener('touchstart', onTouch);\n\n    if (frameAnimation) {\n      window.cancelAnimationFrame(frameAnimation);\n      frameAnimation = 0;\n    }\n\n    smoothScroll.cancel();\n\n    releaseDocumentMouse();\n    releaseTouches();\n    textSelection.release();\n\n    triggerPanEnd();\n  }\n\n  function frame() {\n    if (isDirty) applyTransform();\n  }\n\n  function applyTransform() {\n    isDirty = false;\n\n    // TODO: Should I allow to cancel this?\n    panController.applyTransform(transform);\n\n    triggerEvent('transform');\n    frameAnimation = 0;\n  }\n\n  function onKeyDown(e) {\n    var x = 0,\n      y = 0,\n      z = 0;\n    if (e.keyCode === 38) {\n      y = 1; // up\n    } else if (e.keyCode === 40) {\n      y = -1; // down\n    } else if (e.keyCode === 37) {\n      x = 1; // left\n    } else if (e.keyCode === 39) {\n      x = -1; // right\n    } else if (e.keyCode === 189 || e.keyCode === 109) {\n      // DASH or SUBTRACT\n      z = 1; // `-` -  zoom out\n    } else if (e.keyCode === 187 || e.keyCode === 107) {\n      // EQUAL SIGN or ADD\n      z = -1; // `=` - zoom in (equal sign on US layout is under `+`)\n    }\n\n    if (filterKey(e, x, y, z)) {\n      // They don't want us to handle the key: https://github.com/anvaka/panzoom/issues/45\n      return;\n    }\n\n    if (x || y) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      var clientRect = owner.getBoundingClientRect();\n      // movement speed should be the same in both X and Y direction:\n      var offset = Math.min(clientRect.width, clientRect.height);\n      var moveSpeedRatio = 0.05;\n      var dx = offset * moveSpeedRatio * x;\n      var dy = offset * moveSpeedRatio * y;\n\n      // TODO: currently we do not animate this. It could be better to have animation\n      internalMoveBy(dx, dy);\n    }\n\n    if (z) {\n      var scaleMultiplier = getScaleMultiplier(z * 100);\n      var offset = transformOrigin ? getTransformOriginOffset() : midPoint();\n      publicZoomTo(offset.x, offset.y, scaleMultiplier);\n    }\n  }\n\n  function midPoint() {\n    var ownerRect = owner.getBoundingClientRect();\n    return {\n      x: ownerRect.width / 2,\n      y: ownerRect.height / 2\n    };\n  }\n\n  function onTouch(e) {\n    // let the override the touch behavior\n    beforeTouch(e);\n\n    if (e.touches.length === 1) {\n      return handleSingleFingerTouch(e, e.touches[0]);\n    } else if (e.touches.length === 2) {\n      // handleTouchMove() will care about pinch zoom.\n      pinchZoomLength = getPinchZoomLength(e.touches[0], e.touches[1]);\n      multiTouch = true;\n      startTouchListenerIfNeeded();\n    }\n  }\n\n  function beforeTouch(e) {\n    // TODO: Need to unify this filtering names. E.g. use `beforeTouch`\n    if (options.onTouch && !options.onTouch(e)) {\n      // if they return `false` from onTouch, we don't want to stop\n      // events propagation. Fixes https://github.com/anvaka/panzoom/issues/12\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  function beforeDoubleClick(e) {\n    // TODO: Need to unify this filtering names. E.g. use `beforeDoubleClick``\n    if (options.onDoubleClick && !options.onDoubleClick(e)) {\n      // if they return `false` from onTouch, we don't want to stop\n      // events propagation. Fixes https://github.com/anvaka/panzoom/issues/46\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  function handleSingleFingerTouch(e) {\n    var touch = e.touches[0];\n    var offset = getOffsetXY(touch);\n    lastSingleFingerOffset = offset;\n    var point = transformToScreen(offset.x, offset.y);\n    mouseX = point.x;\n    mouseY = point.y;\n\n    smoothScroll.cancel();\n    startTouchListenerIfNeeded();\n  }\n\n  function startTouchListenerIfNeeded() {\n    if (touchInProgress) {\n      // no need to do anything, as we already listen to events;\n      return;\n    }\n\n    touchInProgress = true;\n    document.addEventListener('touchmove', handleTouchMove);\n    document.addEventListener('touchend', handleTouchEnd);\n    document.addEventListener('touchcancel', handleTouchEnd);\n  }\n\n  function handleTouchMove(e) {\n    if (e.touches.length === 1) {\n      e.stopPropagation();\n      var touch = e.touches[0];\n\n      var offset = getOffsetXY(touch);\n      var point = transformToScreen(offset.x, offset.y);\n\n      var dx = point.x - mouseX;\n      var dy = point.y - mouseY;\n\n      if (dx !== 0 && dy !== 0) {\n        triggerPanStart();\n      }\n      mouseX = point.x;\n      mouseY = point.y;\n      internalMoveBy(dx, dy);\n    } else if (e.touches.length === 2) {\n      // it's a zoom, let's find direction\n      multiTouch = true;\n      var t1 = e.touches[0];\n      var t2 = e.touches[1];\n      var currentPinchLength = getPinchZoomLength(t1, t2);\n\n      // since the zoom speed is always based on distance from 1, we need to apply\n      // pinch speed only on that distance from 1:\n      var scaleMultiplier =\n        1 + (currentPinchLength / pinchZoomLength - 1) * pinchSpeed;\n\n      var firstTouchPoint = getOffsetXY(t1);\n      var secondTouchPoint = getOffsetXY(t2);\n      mouseX = (firstTouchPoint.x + secondTouchPoint.x) / 2;\n      mouseY = (firstTouchPoint.y + secondTouchPoint.y) / 2;\n      if (transformOrigin) {\n        var offset = getTransformOriginOffset();\n        mouseX = offset.x;\n        mouseY = offset.y;\n      }\n\n      publicZoomTo(mouseX, mouseY, scaleMultiplier);\n\n      pinchZoomLength = currentPinchLength;\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n\n  function handleTouchEnd(e) {\n    if (e.touches.length > 0) {\n      var offset = getOffsetXY(e.touches[0]);\n      var point = transformToScreen(offset.x, offset.y);\n      mouseX = point.x;\n      mouseY = point.y;\n    } else {\n      var now = new Date();\n      if (now - lastTouchEndTime < doubleTapSpeedInMS) {\n        if (transformOrigin) {\n          var offset = getTransformOriginOffset();\n          smoothZoom(offset.x, offset.y, zoomDoubleClickSpeed);\n        } else {\n          // We want untransformed x/y here.\n          smoothZoom(lastSingleFingerOffset.x, lastSingleFingerOffset.y, zoomDoubleClickSpeed);\n        }\n      }\n\n      lastTouchEndTime = now;\n\n      triggerPanEnd();\n      releaseTouches();\n    }\n  }\n\n  function getPinchZoomLength(finger1, finger2) {\n    var dx = finger1.clientX - finger2.clientX;\n    var dy = finger1.clientY - finger2.clientY;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  function onDoubleClick(e) {\n    beforeDoubleClick(e);\n    var offset = getOffsetXY(e);\n    if (transformOrigin) {\n      // TODO: looks like this is duplicated in the file.\n      // Need to refactor\n      offset = getTransformOriginOffset();\n    }\n    smoothZoom(offset.x, offset.y, zoomDoubleClickSpeed);\n  }\n\n  function onMouseDown(e) {\n    // if client does not want to handle this event - just ignore the call\n    if (beforeMouseDown(e)) return;\n\n    if (touchInProgress) {\n      // modern browsers will fire mousedown for touch events too\n      // we do not want this: touch is handled separately.\n      e.stopPropagation();\n      return false;\n    }\n    // for IE, left click == 1\n    // for Firefox, left click == 0\n    var isLeftButton =\n      (e.button === 1 && window.event !== null) || e.button === 0;\n    if (!isLeftButton) return;\n\n    smoothScroll.cancel();\n\n    var offset = getOffsetXY(e);\n    var point = transformToScreen(offset.x, offset.y);\n    mouseX = point.x;\n    mouseY = point.y;\n\n    // We need to listen on document itself, since mouse can go outside of the\n    // window, and we will loose it\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n    textSelection.capture(e.target || e.srcElement);\n\n    return false;\n  }\n\n  function onMouseMove(e) {\n    // no need to worry about mouse events when touch is happening\n    if (touchInProgress) return;\n\n    triggerPanStart();\n\n    var offset = getOffsetXY(e);\n    var point = transformToScreen(offset.x, offset.y);\n    var dx = point.x - mouseX;\n    var dy = point.y - mouseY;\n\n    mouseX = point.x;\n    mouseY = point.y;\n\n    internalMoveBy(dx, dy);\n  }\n\n  function onMouseUp() {\n    textSelection.release();\n    triggerPanEnd();\n    releaseDocumentMouse();\n  }\n\n  function releaseDocumentMouse() {\n    document.removeEventListener('mousemove', onMouseMove);\n    document.removeEventListener('mouseup', onMouseUp);\n    panstartFired = false;\n  }\n\n  function releaseTouches() {\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n    document.removeEventListener('touchcancel', handleTouchEnd);\n    panstartFired = false;\n    multiTouch = false;\n    touchInProgress = false;\n  }\n\n  function onMouseWheel(e) {\n    // if client does not want to handle this event - just ignore the call\n    if (beforeWheel(e)) return;\n\n    smoothScroll.cancel();\n\n    var delta = e.deltaY;\n    if (e.deltaMode > 0) delta *= 100;\n\n    var scaleMultiplier = getScaleMultiplier(delta);\n\n    if (scaleMultiplier !== 1) {\n      var offset = transformOrigin\n        ? getTransformOriginOffset()\n        : getOffsetXY(e);\n      publicZoomTo(offset.x, offset.y, scaleMultiplier);\n      e.preventDefault();\n    }\n  }\n\n  function getOffsetXY(e) {\n    var offsetX, offsetY;\n    // I tried using e.offsetX, but that gives wrong results for svg, when user clicks on a path.\n    var ownerRect = owner.getBoundingClientRect();\n    offsetX = e.clientX - ownerRect.left;\n    offsetY = e.clientY - ownerRect.top;\n\n    return { x: offsetX, y: offsetY };\n  }\n\n  function smoothZoom(clientX, clientY, scaleMultiplier) {\n    var fromValue = transform.scale;\n    var from = { scale: fromValue };\n    var to = { scale: scaleMultiplier * fromValue };\n\n    smoothScroll.cancel();\n    cancelZoomAnimation();\n\n    zoomToAnimation = animate(from, to, {\n      step: function (v) {\n        zoomAbs(clientX, clientY, v.scale);\n      },\n      done: triggerZoomEnd\n    });\n  }\n\n  function smoothZoomAbs(clientX, clientY, toScaleValue) {\n    var fromValue = transform.scale;\n    var from = { scale: fromValue };\n    var to = { scale: toScaleValue };\n\n    smoothScroll.cancel();\n    cancelZoomAnimation();\n\n    zoomToAnimation = animate(from, to, {\n      step: function (v) {\n        zoomAbs(clientX, clientY, v.scale);\n      }\n    });\n  }\n\n  function getTransformOriginOffset() {\n    var ownerRect = owner.getBoundingClientRect();\n    return {\n      x: ownerRect.width * transformOrigin.x,\n      y: ownerRect.height * transformOrigin.y\n    };\n  }\n\n  function publicZoomTo(clientX, clientY, scaleMultiplier) {\n    smoothScroll.cancel();\n    cancelZoomAnimation();\n    return zoomByRatio(clientX, clientY, scaleMultiplier);\n  }\n\n  function cancelZoomAnimation() {\n    if (zoomToAnimation) {\n      zoomToAnimation.cancel();\n      zoomToAnimation = null;\n    }\n  }\n\n  function getScaleMultiplier(delta) {\n    var sign = Math.sign(delta);\n    var deltaAdjustedSpeed = Math.min(0.25, Math.abs(speed * delta / 128));\n    return 1 - sign * deltaAdjustedSpeed;\n  }\n\n  function triggerPanStart() {\n    if (!panstartFired) {\n      triggerEvent('panstart');\n      panstartFired = true;\n      smoothScroll.start();\n    }\n  }\n\n  function triggerPanEnd() {\n    if (panstartFired) {\n      // we should never run smooth scrolling if it was multiTouch (pinch zoom animation):\n      if (!multiTouch) smoothScroll.stop();\n      triggerEvent('panend');\n    }\n  }\n\n  function triggerZoomEnd() {\n    triggerEvent('zoomend');\n  }\n\n  function triggerEvent(name) {\n    api.fire(name, api);\n  }\n}\n\nfunction parseTransformOrigin(options) {\n  if (!options) return;\n  if (typeof options === 'object') {\n    if (!isNumber(options.x) || !isNumber(options.y))\n      failTransformOrigin(options);\n    return options;\n  }\n\n  failTransformOrigin();\n}\n\nfunction failTransformOrigin(options) {\n  console.error(options);\n  throw new Error(\n    [\n      'Cannot parse transform origin.',\n      'Some good examples:',\n      '  \"center center\" can be achieved with {x: 0.5, y: 0.5}',\n      '  \"top center\" can be achieved with {x: 0.5, y: 0}',\n      '  \"bottom right\" can be achieved with {x: 1, y: 1}'\n    ].join('\\n')\n  );\n}\n\nfunction noop() { }\n\nfunction validateBounds(bounds) {\n  var boundsType = typeof bounds;\n  if (boundsType === 'undefined' || boundsType === 'boolean') return; // this is okay\n  // otherwise need to be more thorough:\n  var validBounds =\n    isNumber(bounds.left) &&\n    isNumber(bounds.top) &&\n    isNumber(bounds.bottom) &&\n    isNumber(bounds.right);\n\n  if (!validBounds)\n    throw new Error(\n      'Bounds object is not valid. It can be: ' +\n      'undefined, boolean (true|false) or an object {left, top, right, bottom}'\n    );\n}\n\nfunction isNumber(x) {\n  return Number.isFinite(x);\n}\n\n// IE 11 does not support isNaN:\nfunction isNaN(value) {\n  if (Number.isNaN) {\n    return Number.isNaN(value);\n  }\n\n  return value !== value;\n}\n\nfunction rigidScroll() {\n  return {\n    start: noop,\n    stop: noop,\n    cancel: noop\n  };\n}\n\nfunction autoRun() {\n  if (typeof document === 'undefined') return;\n\n  var scripts = document.getElementsByTagName('script');\n  if (!scripts) return;\n  var panzoomScript;\n\n  for (var i = 0; i < scripts.length; ++i) {\n    var x = scripts[i];\n    if (x.src && x.src.match(/\\bpanzoom(\\.min)?\\.js/)) {\n      panzoomScript = x;\n      break;\n    }\n  }\n\n  if (!panzoomScript) return;\n\n  var query = panzoomScript.getAttribute('query');\n  if (!query) return;\n\n  var globalName = panzoomScript.getAttribute('name') || 'pz';\n  var started = Date.now();\n\n  tryAttach();\n\n  function tryAttach() {\n    var el = document.querySelector(query);\n    if (!el) {\n      var now = Date.now();\n      var elapsed = now - started;\n      if (elapsed < 2000) {\n        // Let's wait a bit\n        setTimeout(tryAttach, 100);\n        return;\n      }\n      // If we don't attach within 2 seconds to the target element, consider it a failure\n      console.error('Cannot find the panzoom element', globalName);\n      return;\n    }\n    var options = collectOptions(panzoomScript);\n    console.log(options);\n    window[globalName] = createPanZoom(el, options);\n  }\n\n  function collectOptions(script) {\n    var attrs = script.attributes;\n    var options = {};\n    for (var j = 0; j < attrs.length; ++j) {\n      var attr = attrs[j];\n      var nameValue = getPanzoomAttributeNameValue(attr);\n      if (nameValue) {\n        options[nameValue.name] = nameValue.value;\n      }\n    }\n\n    return options;\n  }\n\n  function getPanzoomAttributeNameValue(attr) {\n    if (!attr.name) return;\n    var isPanZoomAttribute =\n      attr.name[0] === 'p' && attr.name[1] === 'z' && attr.name[2] === '-';\n\n    if (!isPanZoomAttribute) return;\n\n    var name = attr.name.substr(3);\n    var value = JSON.parse(attr.value);\n    return { name: name, value: value };\n  }\n}\n\nautoRun();\n\t",null]}